
AVRASM ver. 2.2.6  D:\workspace\comp9032\project\final_project\final_project\main.asm Sun Oct 22 19:50:20 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
D:\workspace\comp9032\project\final_project\final_project\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\M2560DEF.INC'
D:\workspace\comp9032\project\final_project\final_project\main.asm(9): Including file 'D:\workspace\comp9032\project\final_project\final_project\CONSTANT.INC'
D:\workspace\comp9032\project\final_project\final_project\main.asm(18): Including file 'D:\workspace\comp9032\project\final_project\final_project\MACROS.ASM'
D:\workspace\comp9032\project\final_project\final_project\main.asm(205): Including file 'D:\workspace\comp9032\project\final_project\final_project\KEYPAD.ASM'
D:\workspace\comp9032\project\final_project\final_project\main.asm(206): Including file 'D:\workspace\comp9032\project\final_project\final_project\LCD.ASM'
D:\workspace\comp9032\project\final_project\final_project\main.asm(207): Including file 'D:\workspace\comp9032\project\final_project\final_project\WAIT.ASM'
D:\workspace\comp9032\project\final_project\final_project\main.asm(208): Including file 'D:\workspace\comp9032\project\final_project\final_project\DRONE.ASM'
D:\workspace\comp9032\project\final_project\final_project\main.asm(209): Including file 'D:\workspace\comp9032\project\final_project\final_project\GENERALFUNC.ASM'
D:\workspace\comp9032\project\final_project\final_project\main.asm(211): Including file 'D:\workspace\comp9032\project\final_project\final_project\MOUNTAIN.ASM'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
D:\workspace\comp9032\project\final_project\final_project\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\M2560DEF.INC'
D:\workspace\comp9032\project\final_project\final_project\main.asm(9): Including file 'D:\workspace\comp9032\project\final_project\final_project\CONSTANT.INC'
D:\workspace\comp9032\project\final_project\final_project\main.asm(18): Including file 'D:\workspace\comp9032\project\final_project\final_project\MACROS.ASM'
D:\workspace\comp9032\project\final_project\final_project\main.asm(205): Including file 'D:\workspace\comp9032\project\final_project\final_project\KEYPAD.ASM'
D:\workspace\comp9032\project\final_project\final_project\main.asm(206): Including file 'D:\workspace\comp9032\project\final_project\final_project\LCD.ASM'
D:\workspace\comp9032\project\final_project\final_project\main.asm(207): Including file 'D:\workspace\comp9032\project\final_project\final_project\WAIT.ASM'
D:\workspace\comp9032\project\final_project\final_project\main.asm(208): Including file 'D:\workspace\comp9032\project\final_project\final_project\DRONE.ASM'
D:\workspace\comp9032\project\final_project\final_project\main.asm(209): Including file 'D:\workspace\comp9032\project\final_project\final_project\GENERALFUNC.ASM'
D:\workspace\comp9032\project\final_project\final_project\main.asm(211): Including file 'D:\workspace\comp9032\project\final_project\final_project\MOUNTAIN.ASM'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; motor.asm
                                 ;
                                 ; Created: 2017/9/30 9:19:13
                                 ; Author : shaoh
                                 ;
                                 
                                 .INCLUDE "M2560DEF.INC"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .INCLUDE "CONSTANT.INC"
                                 
                                 ;
                                 ;
                                 ;
                                 ;PORTS USING FOR DIFFERENT I/O DEVICES
                                 .EQU KEY_PORT = PORTL
                                 .EQU KEY_DDR = DDRL
                                 .EQU LCD_DATA_PORT = PORTF
                                 .EQU LCD_DATA_DDR = DDRF
                                 .EQU LCD_CTRL_PORT = PORTA
                                 .EQU LCD_CTRL_DDR = DDRA
                                 .EQU LED_PORT = PORTC
                                 .EQU LED_DDR = DDRC
                                 ;MOTOR SPEED(USING FOR PWM)
                                 .EQU FAST_MOTOR_SPEED = 100
                                 .EQU HALF_MOTOR_SPEED = 50
                                 .EQU STOP_MOTOR_SPEED = 0
                                 ;MOUNTAIN MAP BOARDER
                                 .EQU BORDER_X = 63
                                 .EQU BORDER_Y = 63
                                 ;
                                 .DEF TEMP = R16
                                 .DEF TEMP2 = R17
                                 .DEF DIRECTION = R18
                                 .DEF CURRENT_HEIGHT = R19
                                 .DEF CURRENT_X = R20
                                 .DEF CURRENT_Y = R21
                                 
                                 
                                 .INCLUDE "MACROS.ASM"
                                 
                                 ;STORE
                                 .MACRO STORE
                                 	.IF @0 > 0X40
                                 		STS @0, @1
                                 	.ELSE
                                 		OUT @0, @1
                                 	.ENDIF
                                 .ENDMACRO
                                 ;LOAD
                                 .MACRO LOAD
                                 	.IF @1 > 0X40
                                 		LDS @0, @1
                                 	.ELSE
                                 		IN @0, @1
                                 	.ENDIF
                                 .ENDMACRO
                                 
                                 ;WRITE DATA INTO LCD, USING SOME CONSTANT VALUE
                                 .MACRO LCD_WRITE_DATA
                                 	LDI R16, @0
                                 	RCALL DATA_WRITE
                                 	RCALL LCD_WAIT
                                 .ENDMACRO
                                 
                                 ;WRITE DATA INTO LCD, USING SOME REGISTER
                                 .MACRO LCD_WRITE_DATA_REG
                                 	MOV R16, @0
                                 	RCALL DATA_WRITE
                                 	RCALL LCD_WAIT
                                 .ENDMACRO
                                 
                                 ;WRITE DATA INTO LCD_COM, USING SOME CONSTANT VALUE
                                 .MACRO LCD_WRITE_COM
                                 	LDI R16, @0
                                 	RCALL COM_WRITE
                                 	RCALL LCD_WAIT
                                 .ENDMACRO
                                 
                                 .MACRO LCD_CLEAR
                                 	RCALL LCD_WAIT
                                 	LCD_WRITE_COM 0B00000001
                                 .ENDMACRO
                                 
                                 ;WAIT FOR MORE THAN 1MS USING SOME CONSTANT VALUE
                                 .MACRO MACRO_WAIT
                                 	LDI R16, @0
                                 	CALL WAIT_MORE
                                 .ENDMACRO
                                 
                                 ;FLY CONTROL
                                 .MACRO FLY_CTRL
                                 	LDI R16, @0
                                 	CALL PWM_DUTY
                                 
                                 .ORG 0	;SET INTERRUPT VERTEX
000000 c137                      	RJMP RESET
                                 .ORG INT0ADDR
000002 940c 00a8                 	JMP SEARCH_START	;INT0 TO START SEARCH
                                 .ORG INT1ADDR
000004 940c 00fd                 	JMP SEARCH_ABORT	;INT1 TO ABORT SEARCH
                                 .ORG 0X80
                                 MAIN:
                                 	INPUT_X_LOOP:		;INPUT A X, UNTIL IT IS VALID NUMBER
000080 d149
000081 e001
000082 d162
000083 d146                      		LCD_CLEAR
000084 e500                      		LDI TEMP, LOW(INPUT_X<<1)
000085 e116                      		LDI TEMP2, HIGH(INPUT_X<<1)
000086 d1c1                      		RCALL LCD_DISPLAY_STRING
000087 940e 01a6                 		CALL KEY_VALUE
000089 3f7f                      		CPI R23, -1
00008a f3a9                      		BREQ INPUT_X_LOOP
00008b 3470                      		CPI R23, 64
00008c f798                      		BRSH INPUT_X_LOOP
00008d 2e27                      		MOV R2, R23
                                 
                                 	INPUT_Y_LOOP:		;INPUT A Y, UNTIL IT IS VALID NUMBER
00008e d13b
00008f e001
000090 d154
000091 d138                      		LCD_CLEAR
000092 e50a                      		LDI TEMP, LOW(INPUT_Y<<1)
000093 e116                      		LDI TEMP2, HIGH(INPUT_Y<<1)
000094 d1b3                      		RCALL LCD_DISPLAY_STRING
000095 940e 01a6                 		CALL KEY_VALUE
000097 3f7f                      		CPI R23, -1
000098 f3a9                      		BREQ INPUT_Y_LOOP
000099 3470                      		CPI R23, 64
00009a f798                      		BRSH INPUT_Y_LOOP
00009b 2e37                      		MOV R3, R23
                                 
00009c d12d
00009d e001
00009e d146
00009f d12a                      	LCD_CLEAR
0000a0 e806                      	LDI TEMP, LOW(READY_TO_SEARCH<<1)
0000a1 e116                      	LDI TEMP2, HIGH(READY_TO_SEARCH<<1)
0000a2 d1a5                      	RCALL LCD_DISPLAY_STRING	;DISPLAY READY
0000a3 940e 029b                 	CALL SET_LOCATION			;SET UP ACCIDENT LOCATION
0000a5 e001                      	LDI TEMP, 1<<INT0			;ONLY USE INT0 BEFORE SEARCH START
0000a6 bb0d                      	STORE EIMSK, TEMP				;
                                 	;NOW YOU CAN USE INT TO START SEARCH
                                 	SYSTEM_HALT_LOOP:
0000a7 cfff                      		RJMP SYSTEM_HALT_LOOP
                                 	
                                 SEARCH_START:
0000a8 940e 0307                 	CALL LEDFLASH				;
0000aa e002                      	LDI TEMP, 1<<INT1			;
0000ab bb0d                      	STORE EIMSK, TEMP			;DISABLE THE EX_INT0 SO SEARCH WON'T START AGAIN
0000ac ef4f                      	LDI CURRENT_X, -1			;SET START POSITION
0000ad e050                      	LDI CURRENT_Y, 0
0000ae e5e0                      	LDI ZL, LOW(MOUNTAIN<<1)
0000af e0f6                      	LDI ZH, HIGH(MOUNTAIN<<1)
0000b0 9731                      	SBIW Z, 1					;POINT Z TO JUST BEFORE MOUNTAIN START
0000b1 ef2f                      	SER DIRECTION				;INITIAL DIRECTION RIGHT
0000b2 e030                      	LDI CURRENT_HEIGHT, 0		;CURRENT HEIGHT 0(LANDING)
0000b3 e604
0000b4 940e 0302                 	FLY_CTRL FAST_MOTOR_SPEED	;
                                 	FLY_LOOP:
0000b6 d113
0000b7 e001
0000b8 d12c
0000b9 d110                      		LCD_CLEAR				;
                                 		;FIND NEXT POSITION
0000ba d1a9                      		RCALL FLY_TO_NEXT_POS
0000bb 3f7f                      		CPI R23, -1				;IF ALL MOUNTAIN BEEN SEARCHED
0000bc f199                      		BREQ SEARCH_NOT_FOUND	;THEN ACCIDENT SCENE IS NOT FOUND
0000bd 5f7f                      		SUBI R23, -1			;IF CURRENT HEIGHT IS LESS 
0000be 1737                      		CP CURRENT_HEIGHT, R23	;THEN NEXT POSITION'S HEIGHT + 1
0000bf f160                      		BRLO FLY_HIGH			;WE SHOULD FLY HIGHER
                                 	SEARCH:
0000c0 2f37                      		MOV CURRENT_HEIGHT, R23	;NEW HEIGHT IS MOUNTAIN HEIGHT + 1
                                 		;DISPLAY NOW POS
0000c1 e508
0000c2 d119
0000c3 d106                      		LCD_WRITE_DATA 'X'
0000c4 e30a
0000c5 d116
0000c6 d103                      		LCD_WRITE_DATA ':'
0000c7 2f04                      		MOV TEMP, CURRENT_X
0000c8 d14b                      		RCALL LCD_DISPLAY_NUMBER
0000c9 e200
0000ca d111
0000cb d0fe                      		LCD_WRITE_DATA ' '
0000cc e509
0000cd d10e
0000ce d0fb                      		LCD_WRITE_DATA 'Y'
0000cf e30a
0000d0 d10b
0000d1 d0f8                      		LCD_WRITE_DATA ':'
0000d2 2f05                      		MOV TEMP, CURRENT_Y
0000d3 d140                      		RCALL LCD_DISPLAY_NUMBER
0000d4 ec00
0000d5 d10f
0000d6 d0f3                      		LCD_WRITE_COM 0B11000000
0000d7 e50a
0000d8 d103
0000d9 d0f0                      		LCD_WRITE_DATA 'Z'
0000da e30a
0000db d100
0000dc d0ed                      		LCD_WRITE_DATA ':'
0000dd 2f03                      		MOV TEMP, CURRENT_HEIGHT
0000de d135                      		RCALL LCD_DISPLAY_NUMBER
0000df e200
0000e0 d0fb
0000e1 d0e8                      		LCD_WRITE_DATA ' '
                                 		;DISPLAY "SEARCHING"
0000e2 e604                      		LDI TEMP, LOW(STRING_SEARCH<<1)
0000e3 e116                      		LDI TEMP2, HIGH(STRING_SEARCH<<1)
0000e4 d163                      		RCALL LCD_DISPLAY_STRING
                                 		;SEARCH AREA
0000e5 d19f                      		RCALL DRONE_SEARCH
0000e6 e00f
0000e7 940e 025e                 		MACRO_WAIT 15			;WAIT SOME TIME TO SEARCH
0000e9 3070                      		CPI R23, 0
0000ea f259                      		BREQ FLY_LOOP			;IF NOT FOUND, KEEP FLYING
0000eb c01f                      		RJMP SEARCH_FOUND		;ELSE FOUND
                                 
                                 	FLY_HIGH:
0000ec e604
0000ed 940e 0302                 		FLY_CTRL FAST_MOTOR_SPEED;SPEED UP TO FLY HIGH
0000ef cfd0                      		RJMP SEARCH
                                 
                                 	SEARCH_NOT_FOUND:
0000f0 940e 0307                 		CALL LEDFLASH
0000f2 d0d7
0000f3 e001
0000f4 d0f0
0000f5 d0d4                      		LCD_CLEAR
                                 		;DISPLAY NOT FOUND
0000f6 e706                      		LDI TEMP, LOW(STRING_NOT_FOUND<<1)
0000f7 e116                      		LDI TEMP2, HIGH(STRING_NOT_FOUND<<1)
0000f8 d14f                      		RCALL LCD_DISPLAY_STRING
0000f9 e000
0000fa 940e 0302                 		FLY_CTRL STOP_MOTOR_SPEED
0000fc c03a                      		RJMP END
                                 
                                 	SEARCH_ABORT:
0000fd 940e 0307                 		CALL LEDFLASH
0000ff d0ca
000100 e001
000101 d0e3
000102 d0c7                      		LCD_CLEAR
                                 		;DISPLAY ABORT
000103 e800                      		LDI TEMP, LOW(STRING_ABORT<<1)
000104 e116                      		LDI TEMP2, HIGH(STRING_ABORT<<1)
000105 d142                      		RCALL LCD_DISPLAY_STRING
000106 e000
000107 940e 0302                 		FLY_CTRL STOP_MOTOR_SPEED
000109 9408                      		SEC
00010a c02c                      		RJMP END
                                 
                                 	SEARCH_FOUND:
00010b 940e 0307                 		CALL LEDFLASH
00010d d0bc
00010e e001
00010f d0d5
000110 d0b9                      		LCD_CLEAR
                                 		;DISPLAY "FOUND"
000111 e60e                      		LDI TEMP, LOW(STRING_FOUND<<1)
000112 e116                      		LDI TEMP2, HIGH(STRING_FOUND<<1)
000113 d134                      		RCALL LCD_DISPLAY_STRING
                                 		;DISPLAY POSITION
000114 e508
000115 d0c6
000116 d0b3                      		LCD_WRITE_DATA 'X'
000117 e30a
000118 d0c3
000119 d0b0                      		LCD_WRITE_DATA ':'
00011a 2f04                      		MOV TEMP, CURRENT_X
00011b d0f8                      		RCALL LCD_DISPLAY_NUMBER
00011c ec00
00011d d0c7
00011e d0ab                      		LCD_WRITE_COM 0B11000000
00011f e509
000120 d0bb
000121 d0a8                      		LCD_WRITE_DATA 'Y'
000122 e30a
000123 d0b8
000124 d0a5                      		LCD_WRITE_DATA ':'
000125 2f05                      		MOV TEMP, CURRENT_Y
000126 d0ed                      		RCALL LCD_DISPLAY_NUMBER
000127 e200
000128 d0b3
000129 d0a0                      		LCD_WRITE_DATA ' '
00012a e50a
00012b d0b0
00012c d09d                      		LCD_WRITE_DATA 'Z'
00012d e30a
00012e d0ad
00012f d09a                      		LCD_WRITE_DATA ':'
000130 2f03                      		MOV TEMP, CURRENT_HEIGHT
000131 950a                      		DEC TEMP
000132 d0e1                      		RCALL LCD_DISPLAY_NUMBER
000133 e000
000134 940e 0302                 		FLY_CTRL STOP_MOTOR_SPEED
000136 c000                      		RJMP END	
                                 
                                 END:
000137 cfff                      	RJMP END
                                 
                                 
                                 
                                 
                                 
                                 RESET:
000138 2700                      	CLR TEMP
000139 2711                      	CLR TEMP2
00013a 2722                      	CLR DIRECTION
00013b 2733                      	CLR CURRENT_HEIGHT
00013c 2744                      	CLR CURRENT_X
00013d 2755                      	CLR CURRENT_Y
00013e 2777                      	CLR R23
                                 	;CLEAR ALL REGISTERS BEING USED
                                 
                                 	;SETUP LCD
00013f ef0f                      	SER TEMP
000140 bb00                      	STORE LCD_DATA_DDR, TEMP
000141 b901                      	STORE LCD_CTRL_DDR, TEMP
000142 d0ab                      	RCALL LCD_INIT
                                 
                                 	;SETUP LED
000143 ef0f                      	SER TEMP	
000144 b907                      	STORE LED_DDR, TEMP
                                 	
                                 	;SETUP KEYPAD
000145 ef00                      	LDI TEMP, 0B11110000
000146 9300 010a                 	STORE KEY_DDR, TEMP
                                 	;SET UP EXINTS
000148 e00a                      	LDI TEMP, (1<<ISC01)|(1<<ISC11)
000149 9300 0069                 	STS EICRA, TEMP
00014b 2700                      	CLR TEMP
00014c bb0d                      	STORE EIMSK, TEMP
00014d ef0f                      	SER TEMP
00014e b90d                      	STORE DDRE, TEMP
00014f 940e 02ef                 	CALL PWM_GENERATE
000151 9478                      	SEI						;ENABLE INTERRUPT
000152 cf2d                      	RJMP MAIN
                                 
                                 .INCLUDE "KEYPAD.ASM"
                                 
                                  * KEYPAD.ASM
                                  *
                                  *  CREATED: 2017/10/3
                                  *  AUTHOR: SHAOHUI Z5155945
                                  */ 
                                 ;----------------------------------
                                 ;FUNCTIONS RELATED TO KEYPAD
                                 ;GET_KEY
                                 ;KEY_ASCII
                                 ;KEY_VALUE
                                 ;----------------------------------
                                 ;KEYPAD SHOULD BE CONNECTED AS BELOW
                                 ;KEYPAD -> PORTL
                                 ;COLUMS -> 4:7
                                 ;ROWS -> 0:3
                                 ;PORT DIRECTIONS SHOULD BE SET ON RESET
                                 ;----------------------------------
                                 .EQU ROWMASK = 0X0F
                                 .EQU COLMASK = 0B11101111	;START FROM C0
                                 
                                 ;FUNCTION TO GET KEYVALUE FROM KEYPAD, RETURN ROW:COL ON R24:R25
                                 GET_KEY:
000153 930f                      	PUSH R16				;R16 AS RMASK
000154 931f                      	PUSH R17				;R17 AS ROW
000155 932f                      	PUSH R18				;R18 AS COL
000156 933f                      	PUSH R19				;R19 AS TEMP1
000157 934f                      	PUSH R20				;R20 AS TEMP2
000158 935f                      	PUSH R21				;R21 AS CMASK
                                 	SET_CMASK:
000159 ee5f                      		LDI R21, COLMASK
00015a 9350 010b                 		STORE KEY_PORT, R21	;SET COLMASK TO 0X11101111
00015c 2722                      		CLR R18				;SET COL TO 0
                                 	CLOOP:
00015d e001                      		LDI R16, 0X01		;START FROM ROW 0
00015e 2711                      		CLR R17				;SET ROW TO 0
                                 	RLOOP:
00015f 9130 0109                 		LOAD R19, PINL		;GET VALUE FROM KEYPAD
000161 2f43                      		MOV R20, R19
000162 704f                      		ANDI R20, ROWMASK	;CLR COL INPUT
000163 2340                      		AND R20, R16
000164 f409                      		BRNE NEXT_ROW
000165 c00d                      		RJMP DEBOUNCING_LOOP
                                 	NEXT_ROW:
000166 0f00                      		LSL R16				;LEFTSHIFT RMASK
000167 9513                      		INC R17				;ROW = ROW + 1
000168 3014                      		CPI R17, 4			;IF ROW == 4
000169 f009                      		BREQ NEXT_COL		;GOTO NEXT COL
00016a cff4                      		RJMP RLOOP			;ELSE GOTO NEXT ROW
                                 	NEXT_COL:
00016b 0f55                      		LSL R21				;LEFTSHIFT CMASK
00016c 9523                      		INC R18				;COL = COL + 1
00016d 3024                      		CPI R18, 4			;IF COL == 4
00016e f351                      		BREQ SET_CMASK		;STARTOVER AGAIN
00016f 9553                      		INC R21
000170 9350 010b                 		STORE KEY_PORT, R21		;SET CMASK
000172 cfea                      		RJMP CLOOP			;GOTO NEXT COL
                                 
                                 	DEBOUNCING_LOOP:		;SOLVE DEBOUNCING
000173 9130 0109                 		LOAD R19, PINL
000175 703f                      		ANDI R19, ROWMASK
000176 303f                      		CPI R19, 0X0F
000177 f7d9                      		BRNE DEBOUNCING_LOOP
000178 2f81                      	MOV R24, R17			;R24 AS ROW
000179 2f92                      	MOV R25, R18			;R25 AS COL
                                 
00017a 915f                      	POP R21
00017b 914f                      	POP R20
00017c 913f                      	POP R19
00017d 912f                      	POP R18
00017e 911f                      	POP R17
00017f 910f                      	POP R16
000180 9508                      	RET
                                 
                                 ;GET KEY_ASCII VALUE FROM INPUT AS R24->ROW, R25->COL, RETURN ASCII VALUE AS R23
                                 KEY_ASCII:
000181 938f                      	PUSH R24				;R24 AS ROW
000182 939f                      	PUSH R25				;R25 AS COL
000183 930f                      	PUSH R16				;R16 AS TEMP
000184 920f                      	PUSH R0
000185 921f                      	PUSH R1					;MUL WILL BE USED
                                 
000186 dfcc                      	RCALL GET_KEY
000187 3093                      	CPI R25, 3				;IF COL == 3
000188 f049                      	BREQ ASCII_LETTER
000189 3083                      	CPI R24, 3				;IF ROW == 3
00018a f059                      	BREQ ASCII_SYMBOL
00018b e003                      	LDI R16, 3				;TEMP = 3 * ROW + COL
00018c 9f80                      	MUL R24, R16			;
00018d 2d00                      	MOV R16, R0
00018e 0f09                      	ADD R16, R25 
00018f 5c0f                      	SUBI R16, -'1'			;GET ASCII VALUE
000190 2f70                      	MOV R23, R16
000191 c00e                      	RJMP RETURN_KEY_ASCII
                                 
                                 	ASCII_LETTER:
000192 e401                      		LDI R16, 'A'			;TEMP = 'A'
000193 0f08                      		ADD R16, R24			;TEMP += ROW
000194 2f70                      		MOV R23, R16
000195 c00a                      		RJMP RETURN_KEY_ASCII
                                 
                                 	ASCII_SYMBOL:
000196 3090                      		CPI R25, 0				;'*'
000197 f021                      		BREQ ASCII_STAR
000198 3091                      		CPI R25, 1				;'0'
000199 f021                      		BREQ ASCII_ZERO
00019a e273                      		LDI R23, '#'			;'#'
00019b c004                      		RJMP RETURN_KEY_ASCII
                                 
                                 	ASCII_STAR:
00019c e27a                      		LDI R23, '*'
00019d c002                      		RJMP RETURN_KEY_ASCII
                                 
                                 	ASCII_ZERO:
00019e e370                      		LDI R23, '0'
00019f c000                      		RJMP RETURN_KEY_ASCII
                                 
                                 RETURN_KEY_ASCII:
0001a0 901f                      	POP R1
0001a1 900f                      	POP R0
0001a2 910f                      	POP R16
0001a3 919f                      	POP R25
0001a4 918f                      	POP R24
0001a5 9508                      	RET
                                 ;GET A 8BIT INT USING KEYPAD, END WITH '#'
                                 ;RETURN VALUE -> R23 IF NOT OVERFLOWED
                                 KEY_VALUE:
0001a6 920f                      	PUSH R0
0001a7 921f                      	PUSH R1
0001a8 930f                      	PUSH R16
0001a9 931f                      	PUSH R17
0001aa 932f                      	PUSH R18
                                 
0001ab 2711                      	CLR R17
                                 	
                                 	KEY_VALUE_LOOP:
0001ac dfd4                      		RCALL KEY_ASCII				;GET A VALUE
0001ad 2f07
0001ae d02d
0001af d01a                      		LCD_WRITE_DATA_REG R23		;DISPLAY EVERY KEY PRESSED
0001b0 3273                      		CPI R23, '#'
0001b1 f089                      		BREQ KEY_VALUE_RETURN
0001b2 5370                      		SUBI R23, '0'				;GET THE REAL VALUE
0001b3 3070                      		CPI R23, 0
0001b4 f058                      		BRLO KEY_VALUE_OVERFLOW
0001b5 307a                      		CPI R23, 10
0001b6 f448                      		BRSH KEY_VALUE_OVERFLOW		;MAKE SURE KEY VALUE IS BETWEEN 0-9, IF NOT -> OVERFLOW
                                 		;CONVERT R17
0001b7 e02a                      		LDI R18, 10					
0001b8 9f12                      		MUL R17, R18
0001b9 e020                      		LDI R18, 0
0001ba 1521                      		CP R18, R1
0001bb f421                      		BRNE KEY_VALUE_OVERFLOW		;IF R17 * 10 > 255 -> OVERFLOW
0001bc 2d10                      		MOV R17, R0					;R17 = R17 * 10
0001bd 0f17                      		ADD R17, R23
0001be f008                      		BRCS KEY_VALUE_OVERFLOW		;IF R17 + R23 > 255 -> OVERFLOW
0001bf cfec                      		RJMP KEY_VALUE_LOOP
                                 	KEY_VALUE_OVERFLOW:
0001c0 940e 0307                 		CALL LEDFLASH				;WHEN OVERFLOW OCCURS, FLASH LED
0001c2 ef1f                      		LDI R17, -1
                                 KEY_VALUE_RETURN:
0001c3 2f71                      	MOV R23, R17
0001c4 912f                      	POP R18
0001c5 911f                      	POP R17
0001c6 910f                      	POP R16
0001c7 900f                      	POP R0
0001c8 901f                      	POP R1
0001c9 9508                      	RET
                                 
                                 
                                 
                                 .INCLUDE "LCD.ASM"
                                 
                                  * LCD.ASM
                                  *
                                  *  CREATED: 2017/10/3
                                  *  AUTHOR: SHAOHUI Z5155945
                                  */ 
                                 
                                 ;--------------------------------------
                                 ;FUNCTIONS RELATED TO THE LCD DISPLAY:
                                 ;LCD_WAIT
                                 ;DATA_WRITE
                                 ;COM_WRITE
                                 ;LCD_INIT
                                 ;LCD_DISPLAY_NUMBER:
                                 ;LCD_DISPLAY_NUMBER_16BIT
                                 ;LCD_DISPLAY_STRING
                                 ;--------------------------------------
                                 ;LCD PORTS SHOULD BE CONNECTED AS BELOW
                                 ;LCD_CTRL -> LCD_CTRL_PORT
                                 ;LCD_DATA -> LCD_DATA_PORT
                                 ;WHITCH IS DEFINED IN CONSTANT.INC
                                 ;SPCIFICLY EACH BIT SHOULD BE
                                 .EQU LCD_RS = 7
                                 .EQU LCD_E = 6
                                 .EQU LCD_RW = 5
                                 ;--------------------------------------
                                 ;WAITING FUNCTIONS AND GENERAL FUNCTIONS ARE USED IN SOME OF LCD FUNCTIONS
                                 ;MACROS.ASM SHOULD ALSO BE INCLUDE IN THE MAIN.ASM FILE
                                 ;--------------------------------------
                                 
                                 ;WAIT UNTILL LCD IS NOT BUSY
                                 LCD_WAIT:
0001ca 930f                      	PUSH R16
0001cb 2700                      	CLR R16
0001cc bb00                      	STORE DDRF, R16			;SET PORTF AS INPUT
0001cd e200                      	LDI R16, 1<<LCD_RW
0001ce b902                      	STORE LCD_CTRL_PORT, R16			;SET RS = 0 & RW = 1
                                 	BUSY_LOOP:
0001cf d085                      		RCALL WAIT_1MS		;GET SOME DELAY
0001d0 9a16                      		SBI LCD_CTRL_PORT, LCD_E
0001d1 d083                      		RCALL WAIT_1MS		;GET SOME DELAY
0001d2 e00f                      		LDI R16, PINF
0001d3 9816                      		CBI LCD_CTRL_PORT, LCD_E
0001d4 fd07                      		SBRC R16, 7			;IF BF IS CLEAR, END BUSY LOOP
0001d5 cff9                      		RJMP BUSY_LOOP		;ELSE LOOP UNTIL IT'S SET
0001d6 2700                      	CLR R16
0001d7 b902                      	STORE LCD_CTRL_PORT, R16
0001d8 ef0f                      	SER R16
0001d9 bb00                      	STORE DDRF, R16
0001da 910f                      	POP R16
0001db 9508                      	RET
                                 
                                 ;FUNCTION TO WRITE DATA TO LCD, USING REGISTER R16(DATA)
                                 DATA_WRITE:
0001dc bb01                      	STORE LCD_DATA_PORT, R16			;SEND DATA TO LCD_DATA
0001dd 9a17                      	SBI LCD_CTRL_PORT, LCD_RS		;SET LCD_RS = 1
0001de 9815                      	CBI LCD_CTRL_PORT, LCD_RW		;SET LCD_RW = 0
0001df d075                      	RCALL WAIT_1MS
0001e0 9a16                      	SBI LCD_CTRL_PORT, LCD_E		;ENABLE
0001e1 d073                      	RCALL WAIT_1MS
0001e2 9816                      	CBI LCD_CTRL_PORT, LCD_E
0001e3 d071                      	RCALL WAIT_1MS
0001e4 9508                      	RET		
                                 
                                 ;FUNCTION TO WRITE COM TO LCD, USING REGISTER R16(DATA)
                                 COM_WRITE:
0001e5 bb01                      	STORE LCD_DATA_PORT, R16			;SEND DATA TO LCD_DATA
0001e6 9817                      	CBI LCD_CTRL_PORT, LCD_RS		;SET LCD_RS = 0
0001e7 9815                      	CBI LCD_CTRL_PORT, LCD_RW		;SET LCD_RW = 0
0001e8 d06c                      	RCALL WAIT_1MS
0001e9 9a16                      	SBI LCD_CTRL_PORT, LCD_E		;ENABLE
0001ea d06a                      	RCALL WAIT_1MS
0001eb 9816                      	CBI LCD_CTRL_PORT, LCD_E
0001ec d068                      	RCALL WAIT_1MS
0001ed 9508                      	RET
                                 
                                 ;INIT LCD USING SOME MACROS DEFINED IN MACROS.ASM
                                 LCD_INIT:
0001ee 930f                      	PUSH R16
0001ef 930f                      	PUSH TEMP
0001f0 e00f
0001f1 940e 025e                 	MACRO_WAIT 15				;WAIT 15MS
                                 	;INIT LCD
0001f3 e308
0001f4 dff0
0001f5 dfd4                      	LCD_WRITE_COM 0B00111000
0001f6 e005
0001f7 940e 025e                 	MACRO_WAIT 5
0001f9 e308
0001fa dfea
0001fb dfce                      	LCD_WRITE_COM 0B00111000
0001fc e001
0001fd 940e 025e                 	MACRO_WAIT 1
0001ff e308
000200 dfe4
000201 dfc8                      	LCD_WRITE_COM 0B00111000	;WRITE FUNCTION SET 3TIMES
000202 e308
000203 dfe1
000204 dfc5                      	LCD_WRITE_COM 0B00111000	;2*5*7
                                 
000205 e008
000206 dfde
000207 dfc2                      	LCD_WRITE_COM 0B00001000	;DISPLAY OFF
000208 e001
000209 dfdb
00020a dfbf                      	LCD_WRITE_COM 0B00000001	;DISPLAY CLR
00020b e006
00020c dfd8
00020d dfbc                      	LCD_WRITE_COM 0B00000110	;INCREMENT, NO SHIFT
00020e e00f
00020f dfd5
000210 dfb9                      	LCD_WRITE_COM 0B00001111	;CURSOR ON, BAR, BLINK
000211 910f                      	POP R16
000212 910f                      	POP TEMP
000213 9508                      	RET
                                 
                                 
                                 ;DISPLAY 8BIT NUMBER ON LCD, INPUT R16 AS NUMBER, R23 R24 R25 USING FOR TAKE THE ASCII VALUE OF THE NUMBER
                                 LCD_DISPLAY_NUMBER:
000214 930f                      	PUSH R16
000215 937f                      	PUSH R23
000216 938f                      	PUSH R24
000217 939f                      	PUSH R25
                                 
000218 940e 02a4                 	CALL ITOA				;USING FUNCTION ITOA FROM GENERAL FUNCTIONS TO GET ASCII VALUE OF A CERTAIN INT
00021a 2f07                      	MOV R16, R23			;DISPLAY ASCII SYMBLE ONE BY ONE
00021b dfae                      	RCALL LCD_WAIT
00021c dfbf                      	RCALL DATA_WRITE
00021d 2f08                      	MOV R16, R24			;FROM HIGH TO LOW
00021e dfab                      	RCALL LCD_WAIT
00021f dfbc                      	RCALL DATA_WRITE
000220 2f09                      	MOV R16, R25
000221 dfa8                      	RCALL LCD_WAIT
000222 dfb9                      	RCALL DATA_WRITE
                                 
000223 919f                      	POP R25
000224 918f                      	POP R24
000225 917f                      	POP R23
000226 910f                      	POP R16
000227 9508                      	RET
                                 
                                 ;16BIT NUMBER DISPLAY, SAME TECHNIQUE AS 8BIT VERSION
                                 LCD_DISPLAY_NUMBER_16BIT:
000228 930f                      	PUSH R16
000229 931f                      	PUSH R17
00022a 935f                      	PUSH R21
00022b 936f                      	PUSH R22
00022c 937f                      	PUSH R23
00022d 938f                      	PUSH R24
00022e 939f                      	PUSH R25
                                 
00022f 940e 02bc                 	CALL ITOA_16BIT
000231 2f05                      	MOV R16, R21
000232 df97                      	RCALL LCD_WAIT
000233 dfa8                      	RCALL DATA_WRITE
000234 2f06                      	MOV R16, R22
000235 df94                      	RCALL LCD_WAIT
000236 dfa5                      	RCALL DATA_WRITE
000237 2f07                      	MOV R16, R23
000238 df91                      	RCALL LCD_WAIT
000239 dfa2                      	RCALL DATA_WRITE
00023a 2f08                      	MOV R16, R24
00023b df8e                      	RCALL LCD_WAIT
00023c df9f                      	RCALL DATA_WRITE
00023d 2f09                      	MOV R16, R25
00023e df8b                      	RCALL LCD_WAIT
00023f df9c                      	RCALL DATA_WRITE
                                 
000240 919f                      	POP R25
000241 918f                      	POP R24
000242 917f                      	POP R23
000243 916f                      	POP R22
000244 915f                      	POP R21
000245 910f                      	POP R16
000246 911f                      	POP R17
000247 9508                      	RET
                                 
                                 ;DISPLAY STRING, R16(LOW), R17(HIGH) AS STRING ADDR
                                 LCD_DISPLAY_STRING:
000248 93ef                      	PUSH ZL
000249 93ff                      	PUSH ZH
                                 
00024a 2fe0                      	MOV ZL, R16
00024b 2ff1                      	MOV ZH, R17
                                 	LCD_DISPLAY_STRING_LOOP:
00024c df7d                      		RCALL LCD_WAIT
00024d 9105                      		LPM R16, Z+
00024e 3000                      		CPI R16, 0
00024f f011                      		BREQ LCD_DISPLAY_STRING_RETURN
000250 df8b                      		RCALL DATA_WRITE
000251 cffa                      		RJMP LCD_DISPLAY_STRING_LOOP
                                 	
                                 	LCD_DISPLAY_STRING_RETURN:
000252 91ff                      	POP ZH
000253 91ef                      	POP ZL
000254 9508                      	RET
                                 
                                 .INCLUDE "WAIT.ASM"
                                 
                                  * WAIT.ASM
                                  *
                                  *  CREATED: 2017/10/3
                                  *  AUTHOR: SHAOHUI Z5155945
                                  */ 
                                 ;----------------------------------
                                 ;SOME FUNCTIONS TO GENERATE DELAYS
                                 ;WAIT_1MS
                                 ;WAIT_MORE
                                 ;----------------------------------
                                 
                                 ;FUNCTION TO WAIT FOR 1MS
                                 WAIT_1MS:
000255 938f                      	PUSH R24
000256 939f                      	PUSH R25
                                 
000257 e084                      	LDI R24, LOW(4100)
000258 e190                      	LDI R25, HIGH(4100)		;A LITTLE MORE THAN 1MS
                                 	MS_LOOP:
000259 9701                      		SBIW R24, 1
00025a f7f1                      		BRNE MS_LOOP
                                 	
00025b 919f                      	POP R25
00025c 918f                      	POP R24
00025d 9508                      	RET
                                 
                                 ;USING R16 AS INPUT FOR WAIT R16MS
                                 WAIT_MORE:
00025e 930f                      	PUSH R16
                                 
                                 	WAIT_MORE_LOOP:
00025f dff5                      		RCALL WAIT_1MS		;EACH TIME WAIT FOR 1MS
000260 950a                      		DEC R16
000261 f7e9                      		BRNE WAIT_MORE_LOOP
                                 
000262 910f                      	POP R16
000263 9508                      	RET
                                 .INCLUDE "DRONE.ASM"
                                 
                                 ;R21-> ROW, R20-> COL, R18 -> DIRECTION
                                 ;Z POINT TO LAST POSITION
                                 ;NEW_HEIGHT -> R23 AS RETURN
                                 ;IF REACH END, RETURN -1(WHICH MIGHT NEVER HAPPEN)
                                 FLY_TO_NEXT_POS:    
000264 3020                          CPI R18, 0      ;R18 -> SET AS FLY RIGHT, CLEAR AS FLY LEFT
000265 f071                          BREQ GO_LEFT
000266 334f                          CPI R20, BORDER_X   ;CHECK IF REACHED BOARDER
000267 f0a1                          BREQ GO_DOWN        ;IF BOARDER REACHED, GO DOWN
000268 e502
000269 df72
00026a df5f                          LCD_WRITE_DATA 'R'
00026b 9631                          ADIW Z, 1
00026c 9543                          INC R20
                                 
                                     CHECK_HEIGHT:
00026d 9174                              LPM R23, Z
00026e e200
00026f df6c
000270 df59                              LCD_WRITE_DATA ' '
000271 9508                              RET
                                 
                                     GO_END:
000272 ef7f                              LDI R23, -1
000273 9508                              RET
                                 
                                     GO_LEFT:
000274 3040                              CPI R20, 0
000275 f031                              BREQ GO_DOWN
000276 e40c
000277 df64
000278 df51                              LCD_WRITE_DATA 'L'
000279 9731                              SBIW Z, 1
00027a 954a                              DEC R20
00027b cff1                              RJMP CHECK_HEIGHT
                                     
                                     GO_DOWN:
00027c 335f                              CPI R21, BORDER_Y
00027d f3a1                              BREQ GO_END
00027e e404
00027f df5c
000280 df49                              LCD_WRITE_DATA 'D'
000281 96ff                              ADIW Z, BORDER_Y	    ;NEXT ROW
000282 9520                              COM R18                 ;DIFFERENT DIRECTION
000283 9553                              INC R21					;SET R21, NEXT ROW
000284 cfe8                              RJMP CHECK_HEIGHT
                                 
                                 ;CURRENT POSITION: R20:R21 -> X:Y
                                 ;RETURN R23 AS SIGNAL IF R23 SET, THEN THE ACCIDENT POSITION IS FOUND
                                 ;ELSE IF R23 IS CLR, ACCIDENT POSITION IS NOT FOUND
                                 DRONE_SEARCH:
000285 930f                      	PUSH R16
000286 931f                      	PUSH R17
000287 93ef                      	PUSH ZL
000288 93ff                      	PUSH ZH
                                 
000289 2777                      	CLR R23
00028a e302
00028b 940e 0302                 	FLY_CTRL HALF_MOTOR_SPEED	;SET MOTOR SPEED TO HALF
00028d e0e0                      	LDI ZL, LOW(ACCIDENT)
00028e e0f2                      	LDI ZH, HIGH(ACCIDENT)
                                 
00028f 9101                      	LD R16, Z+
000290 8110                      	LD R17, Z
                                 
000291 1704                      	CP R16, R20
000292 f419                      	BRNE SEARCH_RETURN
000293 1715                      	CP R17, R21
000294 f409                      	BRNE SEARCH_RETURN
000295 ef7f                      	SER R23
                                 SEARCH_RETURN:
000296 91ff                      	POP ZH
000297 91ef                      	POP ZL
000298 910f                      	POP R16
000299 911f                      	POP R17
00029a 9508                      	RET
                                 
                                 ;SET ACCIDENT POSITION IN DESG, ACCIDENT(X,Y)
                                 ;WITH REGISTER R2 AS X, R3 AS Y
                                 SET_LOCATION:
00029b 93ef                          PUSH ZL
00029c 93ff                          PUSH ZH
                                 
00029d e0e0                          LDI ZL, LOW(ACCIDENT)
00029e e0f2                          LDI ZH, HIGH(ACCIDENT)
00029f 9221                          ST Z+, R2
0002a0 8230                          ST Z, R3
                                 
0002a1 91ff                          POP ZH
0002a2 91ef                          POP ZL
                                 .INCLUDE "GENERALFUNC.ASM"
0002a3 9508                      
                                  * GENERALFUNC.ASM
                                  *
                                  *  CREATED: 2017/9/29 22:20:30
                                  *   AUTHOR: SHAOH
                                  */ 
                                 ;---------------------------------------------
                                 ;SOME USEFUL FUNCTIONS:
                                 ;ITOA
                                 ;ITOA_16BIT
                                 ;PWM_GENERATE
                                 ;PWM_DUTY
                                 ;LEDFLASH
                                 ;---------------------------------------------
                                 ITOA:	;8BIT INPUT(MAX 255, MIN 0) R16, R23:R24:R25 OUTPUT ASCII VALUE
0002a4 930f                      	PUSH R16
0002a5 2777                      	CLR R23
0002a6 2788                      	CLR R24
0002a7 2799                      	CLR R25
                                 
                                 	E100S:					;EXTRACT 100
0002a8 3604                      		CPI R16, 100
0002a9 f018                      		BRLO E10S
0002aa 5604                      		SUBI R16, 100
0002ab 9573                      		INC R23
0002ac cffb                      		RJMP E100S
                                 
                                 	E10S:					;EXTRACT 10
0002ad 300a                      		CPI R16, 10
0002ae f018                      		BRLO E1S
0002af 500a                      		SUBI R16, 10
0002b0 9583                      		INC R24
0002b1 cffb                      		RJMP E10S
                                 
                                 	E1S:					;EXTRACT 1
0002b2 3001                      		CPI R16, 1
0002b3 f018                      		BRLO ITOA_RETURN
0002b4 5001                      		SUBI R16, 1
0002b5 9593                      		INC R25
0002b6 cffb                      		RJMP E1S
                                 
                                 	ITOA_RETURN:
0002b7 5d70                      		SUBI R23, -'0'		;GET ASCII VALUE FOR EACH
0002b8 5d80                      		SUBI R24, -'0'
0002b9 5d90                      		SUBI R25, -'0'
0002ba 910f                      		POP R16
0002bb 9508                      		RET
                                 
                                 ITOA_16BIT:	;16BIT INPUT(MAX 65535, MIN 0) R17_HIGH:R16_LOW, R21:R22:R23:R24:R25 OUTPUT ASCII VALUE
0002bc 930f                      	PUSH R16			;LOW
0002bd 931f                      	PUSH R17			;HIGH
0002be 932f                      	PUSH R18			;TEMP REGISTER
0002bf 2755                      	CLR R21				;10000S
0002c0 2766                      	CLR R22				;1000S
0002c1 2777                      	CLR R23				;100S
0002c2 2788                      	CLR R24				;10S
0002c3 2799                      	CLR R25				;1S
                                 
                                 	XE10000S:					;EXTRACT 10000
0002c4 e227                      		LDI R18, HIGH(10000)
0002c5 3100                      		CPI R16, LOW(10000)
0002c6 0712                      		CPC R17, R18
0002c7 f020                      		BRLO XE1000S
0002c8 5100                      		SUBI R16, LOW(10000)
0002c9 0b12                      		SBC R17, R18
0002ca 9553                      		INC R21
0002cb cff8                      		RJMP XE10000S
                                 
                                 	XE1000S:					;EXTRACT 1000
0002cc e023                      		LDI R18, HIGH(1000)		;USE R18 TO CMP
0002cd 3e08                      		CPI R16, LOW(1000)		;CMP LOW FIRST
0002ce 0712                      		CPC R17, R18			;THEN HIGH
0002cf f020                      		BRLO XE100S
0002d0 5e08                      		SUBI R16, LOW(1000)		;SUB LOW FIRST
0002d1 0b12                      		SBC R17, R18			;THEN HIGH
0002d2 9563                      		INC R22
0002d3 cff8                      		RJMP XE1000S
                                 
                                 	XE100S:					;EXTRACT 100
0002d4 e020                      		LDI R18, HIGH(100)
0002d5 3604                      		CPI R16, LOW(100)
0002d6 0712                      		CPC R17, R18
0002d7 f020                      		BRLO XE10S
0002d8 5604                      		SUBI R16, LOW(100)
0002d9 0b12                      		SBC R17, R18
0002da 9573                      		INC R23
0002db cff8                      		RJMP XE100S
                                 
                                 	XE10S:					;EXTRACT 10
0002dc 300a                      		CPI R16, 10
0002dd f018                      		BRLO XE1S
0002de 500a                      		SUBI R16, 10
0002df 9583                      		INC R24
0002e0 cffb                      		RJMP XE10S
                                 
                                 	XE1S:					;EXTRACT 1
0002e1 3001                      		CPI R16, 1
0002e2 f018                      		BRLO ITOA_16BIT_RETURN
0002e3 5001                      		SUBI R16, 1
0002e4 9593                      		INC R25
0002e5 cffb                      		RJMP XE1S
                                 
                                 	ITOA_16BIT_RETURN:
0002e6 5d50                      		SUBI R21, -'0'		;GET ASCII VALUE FOR EACH
0002e7 5d60                      		SUBI R22, -'0'
0002e8 5d70                      		SUBI R23, -'0'
0002e9 5d80                      		SUBI R24, -'0'
0002ea 5d90                      		SUBI R25, -'0'
                                 
0002eb 912f                      		POP R18
0002ec 911f                      		POP R17
0002ed 910f                      		POP R16
0002ee 9508                      		RET
                                 
                                 ;USING TIMER3 AND OCR3B TO GENERATE PWM
                                 
                                 PWM_GENERATE:
0002ef 930f                      	PUSH R16
                                 	
0002f0 ef0f                      	SER R16 
0002f1 b90d                      	STORE DDRE, R16					;SET UP PORTE BIT4 AS PWM OUTPUT
0002f2 2700                      	CLR R16
0002f3 9300 009d                 	STORE OCR3CH, R16
0002f5 2700                      	CLR R16
0002f6 9300 009c                 	STORE OCR3CL, R16					;ONLY OCR3BL MATTERS(8BIT PWM)
0002f8 e009                      	LDI R16, (1<<WGM30)|(1<<COM3C1)	;8BIT PHASE CORRECT PWM MODE
0002f9 9300 0090                 	STORE TCCR3A, R16		
0002fb e001                      	LDI R16, 1<<CS30					
0002fc 9300 0091                 	STORE TCCR3B, R16
0002fe ef0f                      	SER R16
0002ff b908                      	STORE PORTC, R16
                                 	
000300 910f                      	POP R16
000301 9508                      	RET
                                 
                                 ;CHANGE PWM DUTY
                                 .SET PWM_CMP_REG = OCR3CL		;USE OCR3BL AS PWM COMPARE REGIS
                                 PWM_DUTY:
000302 930f                      	PUSH R16
                                 
000303 9300 009c                 	STORE PWM_CMP_REG, R16
                                 
000305 910f                      	POP R16
000306 9508                      	RET
                                 
                                 LEDFLASH:						;FLASH LED FOR SOME TIMES
000307 930f                      	PUSH R16
                                 
000308 ef0f                      	SER R16
000309 b908                      	STORE PORTC, R16
00030a e302
00030b 940e 025e                 	MACRO_WAIT 50
00030d 2700                      	CLR R16
00030e b908                      	STORE PORTC, R16
00030f e302
000310 940e 025e                 	MACRO_WAIT 50
000312 ef0f                      	SER R16
000313 b908                      	STORE PORTC, R16
000314 e302
000315 940e 025e                 	MACRO_WAIT 50
000317 2700                      	CLR R16
000318 b908                      	STORE PORTC, R16
000319 e302
00031a 940e 025e                 	MACRO_WAIT 50
00031c ef0f                      	SER R16
00031d b908                      	STORE PORTC, R16
00031e e302
00031f 940e 025e                 	MACRO_WAIT 50
000321 2700                      	CLR R16
000322 b908                      	STORE PORTC, R16
000323 e302
000324 940e 025e                 	MACRO_WAIT 50
                                 
000326 910f                      	POP R16
000327 9508                      	RET
                                 ;HARD CODE MAP
                                 .INCLUDE "MOUNTAIN.ASM"
                                 
000328 0000
000329 0000
00032a 0000
00032b 0000
00032c 0000
00032d 0000
00032e 0a00
00032f 150f
000330 1612
000331 1f1c
000332 2121
000333 2b28
000334 2b28
000335 292b
000336 262a
000337 2120
000338 1b1d
000339 1618
00033a 151a
00033b 1c1a
00033c 1d1e
00033d 221c
00033e 2320
00033f 1e23
000340 151b
000341 1310
000342 1115
000343 0a11
000344 0d0f
000345 0000
000346 0000
000347 0000                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,10,15,21,18,22,28,31,33,33,40,43,40,43,43,41,42,38,32,33,29,27,24,22,26,21,26,28,30,29,28,34,32,35,35,30,27,21,16,19,21,17,17,10,15,13,0,0,0,0,0,0
000348 0000
000349 0000
00034a 0000
00034b 0000
00034c 0000
00034d 0000
00034e 0e0a
00034f 1612
000350 1b16
000351 2120
000352 2623
000353 2b2b
000354 2e2b
000355 2d30
000356 292c
000357 2125
000358 1d1f
000359 1b1b
00035a 161a
00035b 1d1a
00035c 2120
00035d 241f
00035e 2824
00035f 2228
000360 171b
000361 1814
000362 1415
000363 0f11
000364 0d0f
000365 0008
000366 0000
000367 0000                      .db 0,0,0,0,0,0,0,0,0,0,0,0,10,14,18,22,22,27,32,33,35,38,43,43,43,46,48,45,44,41,37,33,31,29,27,27,26,22,26,29,32,33,31,36,36,40,40,34,27,23,20,24,21,20,17,15,15,13,8,0,0,0,0,0
000368 0000
000369 0000
00036a 0000
00036b 0000
00036c 0000
00036d 0000
00036e 0b0a
00036f 160e
000370 1817
000371 221f
000372 2123
000373 2a26
000374 2e28
000375 2c2f
000376 2829
000377 2126
000378 191a
000379 1517
00037a 1e18
00037b 201f
00037c 2422
00037d 2421
00037e 2824
00037f 2227
000380 1a1d
000381 1919
000382 1919
000383 0717
000384 0d08
000385 000a
000386 0000
000387 0000                      .db 0,0,0,0,0,0,0,0,0,0,0,0,10,11,14,22,23,24,31,34,35,33,38,42,40,46,47,44,41,40,38,33,26,25,23,21,24,30,31,32,34,36,33,36,36,40,39,34,29,26,25,25,25,25,23,7,8,13,10,0,0,0,0,0
000388 0000
000389 0000
00038a 0000
00038b 0000
00038c 0000
00038d 0000
00038e 0900
00038f 110e
000390 1712
000391 1d1a
000392 1d1b
000393 2822
000394 2c2b
000395 262b
000396 2627
000397 1c26
000398 1519
000399 1517
00039a 1b1a
00039b 2524
00039c 2926
00039d 2428
00039e 2b28
00039f 2527
0003a0 2424
0003a1 1e21
0003a2 1a1e
0003a3 0c16
0003a4 090b
0003a5 0000
0003a6 0000
0003a7 0000                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,9,14,17,18,23,26,29,27,29,34,40,43,44,43,38,39,38,38,28,25,21,23,21,26,27,36,37,38,41,40,36,40,43,39,37,36,36,33,30,30,26,22,12,11,9,0,0,0,0,0,0
0003a8 0000
0003a9 0000
0003aa 0000
0003ab 0000
0003ac 0000
0003ad 0000
0003ae 0000
0003af 0c08
0003b0 1510
0003b1 1918
0003b2 1817
0003b3 231f
0003b4 2925
0003b5 2929
0003b6 2828
0003b7 1723
0003b8 1b19
0003b9 1a15
0003ba 1e1d
0003bb 241f
0003bc 2a2a
0003bd 2c2c
0003be 302f
0003bf 282b
0003c0 2428
0003c1 2123
0003c2 1c1e
0003c3 0e13
0003c4 0b0b
0003c5 0908
0003c6 0900
0003c7 0a00                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,12,16,21,24,25,23,24,31,35,37,41,41,41,40,40,35,23,25,27,21,26,29,30,31,36,42,42,44,44,47,48,43,40,40,36,35,33,30,28,19,14,11,11,8,9,0,9,0,10
0003c8 0000
0003c9 0000
0003ca 0000
0003cb 0000
0003cc 0000
0003cd 0000
0003ce 0900
0003cf 0909
0003d0 0e0b
0003d1 1913
0003d2 1313
0003d3 1f1b
0003d4 2929
0003d5 2924
0003d6 2425
0003d7 1720
0003d8 1d19
0003d9 2520
0003da 1f1c
0003db 2424
0003dc 2c25
0003dd 2d28
0003de 352f
0003df 2f33
0003e0 2a2f
0003e1 2226
0003e2 2020
0003e3 1317
0003e4 101b
0003e5 0c0d
0003e6 0d07
0003e7 0f0a                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,11,14,19,25,19,19,27,31,41,41,36,41,37,36,32,23,25,29,32,37,28,31,36,36,37,44,40,45,47,53,51,47,47,42,38,34,32,32,23,19,27,16,13,12,7,13,10,15
0003e8 0000
0003e9 0000
0003ea 0000
0003eb 0000
0003ec 0000
0003ed 0000
0003ee 0d0a
0003ef 0e0d
0003f0 0b06
0003f1 1512
0003f2 1010
0003f3 2120
0003f4 2823
0003f5 1d22
0003f6 1c21
0003f7 1720
0003f8 1f1b
0003f9 2625
0003fa 272c
0003fb 2522
0003fc 2f29
0003fd 2f2a
0003fe 3833
0003ff 3437
000400 2b33
000401 2726
000402 2523
000403 1b1c
000404 111b
000405 080c
000406 0e0b
000407 110a                      .db 0,0,0,0,0,0,0,0,0,0,0,0,10,13,13,14,6,11,18,21,16,16,32,33,35,40,34,29,33,28,32,23,27,31,37,38,44,39,34,37,41,47,42,47,51,56,55,52,51,43,38,39,35,37,28,27,27,17,12,8,11,14,10,17
000408 0000
000409 0000
00040a 0000
00040b 0000
00040c 0000
00040d 0900
00040e 0d0d
00040f 1210
000410 1312
000411 1616
000412 1916
000413 211e
000414 2322
000415 1b1f
000416 191e
000417 1b19
000418 221f
000419 2724
00041a 272c
00041b 2c2a
00041c 2f2e
00041d 2f2f
00041e 392f
00041f 3737
000420 2f34
000421 2728
000422 2526
000423 2020
000424 1620
000425 1414
000426 1010
000427 110e                      .db 0,0,0,0,0,0,0,0,0,0,0,9,13,13,16,18,18,19,22,22,22,25,30,33,34,35,31,27,30,25,25,27,31,34,36,39,44,39,42,44,46,47,47,47,47,57,55,55,52,47,40,39,38,37,32,32,32,22,20,20,16,16,14,17
000428 0000
000429 0000
00042a 0000
00042b 0000
00042c 0000
00042d 0000
00042e 0d08
00042f 100b
000430 1011
000431 1115
000432 1411
000433 1c1c
000434 201f
000435 181c
000436 1a19
000437 1e1d
000438 2421
000439 2929
00043a 2c2d
00043b 2f2e
00043c 3433
00043d 3434
00043e 3b34
00043f 3a3b
000440 3038
000441 2b2b
000442 292b
000443 2425
000444 1925
000445 1717
000446 1415
000447 1415                      .db 0,0,0,0,0,0,0,0,0,0,0,0,8,13,11,16,17,16,21,17,17,20,28,28,31,32,28,24,25,26,29,30,33,36,41,41,45,44,46,47,51,52,52,52,52,59,59,58,56,48,43,43,43,41,37,36,37,25,23,23,21,20,21,20
000448 0000
000449 0000
00044a 0000
00044b 0000
00044c 0000
00044d 0000
00044e 0a00
00044f 1007
000450 0e0d
000451 0b13
000452 130e
000453 1a18
000454 171a
000455 191c
000456 1c18
000457 201f
000458 2520
000459 2d27
00045a 312f
00045b 2f2e
00045c 3834
00045d 3535
00045e 3b39
00045f 3838
000460 3035
000461 2f2c
000462 2c2f
000463 272a
000464 1e25
000465 181e
000466 1618
000467 1216                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,10,7,16,13,14,19,11,14,19,24,26,26,23,28,25,24,28,31,32,32,37,39,45,47,49,46,47,52,56,53,53,57,59,56,56,53,48,44,47,47,44,42,39,37,30,30,24,24,22,22,18
000468 0000
000469 0000
00046a 0000
00046b 0000
00046c 0000
00046d 0000
00046e 0000
00046f 0600
000470 090b
000471 0b09
000472 1111
000473 1514
000474 1c1a
000475 181c
000476 1d1d
000477 2521
000478 2323
000479 2e28
00047a 322f
00047b 2f2f
00047c 3b34
00047d 3639
00047e 3d38
00047f 393e
000480 3539
000481 3330
000482 2f33
000483 232d
000484 2321
000485 1c21
000486 1d18
000487 181d                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,11,9,9,11,17,17,20,21,26,28,28,24,29,29,33,37,35,35,40,46,47,50,47,47,52,59,57,54,56,61,62,57,57,53,48,51,51,47,45,35,33,35,33,28,24,29,29,24
000488 0000
000489 0000
00048a 0000
00048b 0000
00048c 0000
00048d 0000
00048e 0000
00048f 0000
000490 0706
000491 0d0b
000492 1312
000493 1514
000494 1919
000495 1b1b
000496 1d1c
000497 2521
000498 2525
000499 2b29
00049a 3430
00049b 3434
00049c 3b38
00049d 3739
00049e 403b
00049f 3e40
0004a0 3a3e
0004a1 3338
0004a2 2d31
0004a3 2629
0004a4 2323
0004a5 1e21
0004a6 1e1e
0004a7 1c1d                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,11,13,18,19,20,21,25,25,27,27,28,29,33,37,37,37,41,43,48,52,52,52,56,59,57,55,59,64,64,62,62,58,56,51,49,45,41,38,35,35,33,30,30,30,29,28
0004a8 0000
0004a9 0000
0004aa 0000
0004ab 0000
0004ac 0000
0004ad 0000
0004ae 0000
0004af 0000
0004b0 0000
0004b1 0a06
0004b2 1310
0004b3 1214
0004b4 1815
0004b5 1618
0004b6 1c19
0004b7 201c
0004b8 2827
0004b9 2a28
0004ba 302e
0004bb 3333
0004bc 3635
0004bd 3636
0004be 3b36
0004bf 3e3f
0004c0 3739
0004c1 3636
0004c2 2f31
0004c3 232d
0004c4 2121
0004c5 2021
0004c6 1b1f
0004c7 1317                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,10,16,19,20,18,21,24,24,22,25,28,28,32,39,40,40,42,46,48,51,51,53,54,54,54,54,59,63,62,57,55,54,54,49,47,45,35,33,33,33,32,31,27,23,19
0004c8 0000
0004c9 0000
0004ca 0000
0004cb 0000
0004cc 0000
0004cd 0000
0004ce 0000
0004cf 0000
0004d0 0900
0004d1 0e0b
0004d2 1010
0004d3 1311
0004d4 1715
0004d5 1516
0004d6 1c19
0004d7 201c
0004d8 2625
0004d9 2a28
0004da 302d
0004db 2f33
0004dc 342f
0004dd 2f35
0004de 3833
0004df 3c3b
0004e0 3234
0004e1 3633
0004e2 2a35
0004e3 1e27
0004e4 1b1c
0004e5 1c17
0004e6 191b
0004e7 1113                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,14,16,16,17,19,21,23,22,21,25,28,28,32,37,38,40,42,45,48,51,47,47,52,53,47,51,56,59,60,52,50,51,54,53,42,39,30,28,27,23,28,27,25,19,17
0004e8 0000
0004e9 0000
0004ea 0000
0004eb 0000
0004ec 0000
0004ed 0000
0004ee 0000
0004ef 0000
0004f0 0000
0004f1 0e09
0004f2 0f0e
0004f3 0d0f
0004f4 1711
0004f5 1914
0004f6 1c1c
0004f7 1d18
0004f8 2222
0004f9 2627
0004fa 2f2b
0004fb 2b2a
0004fc 332a
0004fd 2e2e
0004fe 352e
0004ff 3539
000500 2d33
000501 3633
000502 2f34
000503 1926
000504 1b19
000505 1317
000506 0e0f
000507 0f0e                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,14,14,15,15,13,17,23,20,25,28,28,24,29,34,34,39,38,43,47,42,43,42,51,46,46,46,53,57,53,51,45,51,54,52,47,38,25,25,27,23,19,15,14,14,15
000508 0000
000509 0000
00050a 0000
00050b 0000
00050c 0000
00050d 0000
00050e 0000
00050f 0000
000510 0000
000511 0c09
000512 0c0c
000513 0c0e
000514 1011
000515 1814
000516 1512
000517 1918
000518 201f
000519 2423
00051a 2e27
00051b 2829
00051c 332e
00051d 3032
00051e 332c
00051f 3339
000520 2d2f
000521 292d
000522 2c2f
000523 1727
000524 1417
000525 130f
000526 0d0d
000527 0d09                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,12,12,12,14,12,17,16,20,24,18,21,24,25,31,32,35,36,39,46,41,40,46,51,50,48,44,51,57,51,47,45,45,41,47,44,39,23,23,20,15,19,13,13,9,13
000528 0000
000529 0000
00052a 0000
00052b 0000
00052c 0000
00052d 0000
00052e 0000
00052f 0000
000530 0000
000531 0a06
000532 100f
000533 1010
000534 1310
000535 1013
000536 1211
000537 1613
000538 1d19
000539 2120
00053a 2525
00053b 2425
00053c 312c
00053d 2f32
00053e 2e2c
00053f 3039
000540 2d2c
000541 2629
000542 2a2a
000543 2627
000544 0f17
000545 0f0d
000546 0809
000547 0800                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,10,15,16,16,16,16,19,19,16,17,18,19,22,25,29,32,33,37,37,37,36,44,49,50,47,44,46,57,48,44,45,41,38,42,42,39,38,23,15,13,15,9,8,0,8
000548 0000
000549 0000
00054a 0000
00054b 0000
00054c 0600
00054d 0000
00054e 0000
00054f 0000
000550 0700
000551 110b
000552 1411
000553 0f14
000554 150d
000555 0d15
000556 1310
000557 1513
000558 1c17
000559 1f1c
00055a 2024
00055b 2625
00055c 2c28
00055d 2f2e
00055e 292a
00055f 3036
000560 2a30
000561 2525
000562 2424
000563 2524
000564 1617
000565 0f15
000566 080c
000567 0000                      .db 0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,11,17,17,20,20,15,13,21,21,13,16,19,19,21,23,28,28,31,36,32,37,38,40,44,46,47,42,41,54,48,48,42,37,37,36,36,36,37,23,22,21,15,12,8,0,0
000568 0000
000569 0000
00056a 0000
00056b 0000
00056c 0b07
00056d 0008
00056e 0000
00056f 0000
000570 0800
000571 0c0c
000572 1211
000573 0f14
000574 1508
000575 1011
000576 1414
000577 0f0f
000578 1817
000579 1f1d
00057a 2321
00057b 2325
00057c 2824
00057d 2a26
00057e 2527
00057f 2e31
000580 272c
000581 2121
000582 1d20
000583 1f21
000584 1517
000585 1212
000586 0009
000587 0000                      .db 0,0,0,0,0,0,0,0,7,11,8,0,0,0,0,0,0,8,12,12,17,18,20,15,8,21,17,16,20,20,15,15,23,24,29,31,33,35,37,35,36,40,38,42,39,37,49,46,44,39,33,33,32,29,33,31,23,21,18,18,9,0,0,0
000588 0000
000589 0000
00058a 0000
00058b 0800
00058c 0e0c
00058d 060b
00058e 0000
00058f 0000
000590 0a00
000591 0e0e
000592 1514
000593 1116
000594 190d
000595 1518
000596 0d14
000597 0c10
000598 1c1b
000599 1e1c
00059a 1b1d
00059b 2420
00059c 2726
00059d 2323
00059e 211f
00059f 2b21
0005a0 2a2a
0005a1 282a
0005a2 1a1f
0005a3 1c17
0005a4 1116
0005a5 0c0d
0005a6 0008
0005a7 0000                      .db 0,0,0,0,0,0,0,8,12,14,11,6,0,0,0,0,0,10,14,14,20,21,22,17,13,25,24,21,20,13,16,12,27,28,28,30,29,27,32,36,38,39,35,35,31,33,33,43,42,42,42,40,31,26,23,28,22,17,13,12,8,0,0,0
0005a8 0000
0005a9 0000
0005aa 0000
0005ab 0000
0005ac 1007
0005ad 060b
0005ae 0000
0005af 090a
0005b0 0c0a
0005b1 110c
0005b2 1a15
0005b3 161b
0005b4 1919
0005b5 1518
0005b6 1212
0005b7 1413
0005b8 1817
0005b9 1c17
0005ba 1614
0005bb 221b
0005bc 2422
0005bd 2020
0005be 1c1e
0005bf 191b
0005c0 1619
0005c1 262a
0005c2 1a1c
0005c3 1417
0005c4 0e0f
0005c5 0a09
0005c6 0000
0005c7 0000                      .db 0,0,0,0,0,0,0,0,7,16,11,6,0,0,10,9,10,12,12,17,21,26,27,22,25,25,24,21,18,18,19,20,23,24,23,28,20,22,27,34,34,36,32,32,30,28,27,25,25,22,42,38,28,26,23,20,15,14,9,10,0,0,0,0
0005c8 0000
0005c9 0000
0005ca 0000
0005cb 0a00
0005cc 100c
0005cd 090c
0005ce 0a00
0005cf 0c0b
0005d0 110e
0005d1 1612
0005d2 1b1b
0005d3 1b1e
0005d4 1919
0005d5 1818
0005d6 1315
0005d7 1214
0005d8 1517
0005d9 1113
0005da 1312
0005db 1f1a
0005dc 221f
0005dd 1f20
0005de 1c1f
0005df 191a
0005e0 1416
0005e1 2618
0005e2 1322
0005e3 1113
0005e4 0c0c
0005e5 000a
0005e6 0000
0005e7 0000                      .db 0,0,0,0,0,0,0,10,12,16,12,9,0,10,11,12,14,17,18,22,27,27,30,27,25,25,24,24,21,19,20,18,23,21,19,17,18,19,26,31,31,34,32,31,31,28,26,25,22,20,24,38,34,19,19,17,12,12,10,0,0,0,0,0
0005e8 0000
0005e9 0000
0005ea 0000
0005eb 0d0a
0005ec 120e
0005ed 0c0d
0005ee 0a09
0005ef 0d0d
0005f0 1110
0005f1 1714
0005f2 1d1a
0005f3 1b1e
0005f4 151a
0005f5 0f13
0005f6 0d10
0005f7 1112
0005f8 0b16
0005f9 0e0e
0005fa 100e
0005fb 1c18
0005fc 2222
0005fd 2122
0005fe 171c
0005ff 1417
000600 1415
000601 1914
000602 1320
000603 1010
000604 080b
000605 0000
000606 0000
000607 0000                      .db 0,0,0,0,0,0,10,13,14,18,13,12,9,10,13,13,16,17,20,23,26,29,30,27,26,21,19,15,16,13,18,17,22,11,14,14,14,16,24,28,34,34,34,33,28,23,23,20,21,20,20,25,32,19,16,16,11,8,0,0,0,0,0,0
000608 0000
000609 0000
00060a 0a00
00060b 0f0b
00060c 120f
00060d 0b0d
00060e 0b0a
00060f 0b0d
000610 1212
000611 1816
000612 221d
000613 2222
000614 1a1a
000615 1216
000616 1011
000617 150f
000618 0a15
000619 0a0b
00061a 110d
00061b 1814
00061c 201b
00061d 1d1b
00061e 1717
00061f 1417
000620 1312
000621 1614
000622 0c15
000623 0c0f
000624 000a
000625 0000
000626 0000
000627 0000                      .db 0,0,0,0,0,10,11,15,15,18,13,11,10,11,13,11,18,18,22,24,29,34,34,34,26,26,22,18,17,16,15,21,21,10,11,10,13,17,20,24,27,32,27,29,23,23,23,20,18,19,20,22,21,12,15,12,10,0,0,0,0,0,0,0
000628 0000
000629 0700
00062a 0c09
00062b 0e0d
00062c 1712
00062d 1112
00062e 0f0a
00062f 0d10
000630 1714
000631 1a17
000632 2320
000633 1e23
000634 191d
000635 0c0b
000636 0d0e
000637 130d
000638 0b10
000639 0a06
00063a 0d0d
00063b 1615
00063c 1d1b
00063d 1d1c
00063e 1317
00063f 1417
000640 0c14
000641 1411
000642 0d11
000643 080d
000644 0000
000645 0000
000646 0000
000647 0000                      .db 0,0,0,7,9,12,13,14,18,23,18,17,10,15,16,13,20,23,23,26,32,35,35,30,29,25,11,12,14,13,13,19,16,11,6,10,13,13,21,22,27,29,28,29,23,19,23,20,20,12,17,20,17,13,13,8,0,0,0,0,0,0,0,0
000648 0000
000649 0b08
00064a 0e0d
00064b 140e
00064c 1a15
00064d 1517
00064e 150d
00064f 1015
000650 110d
000651 1c17
000652 201c
000653 2223
000654 0d1d
000655 090d
000656 0d0e
000657 0b0c
000658 0b0c
000659 0b0b
00065a 0f0b
00065b 1414
00065c 191a
00065d 1a1b
00065e 1919
00065f 1417
000660 0c0f
000661 100c
000662 0d0d
000663 0c0c
000664 000a
000665 0000
000666 0000
000667 0000                      .db 0,0,8,11,13,14,14,20,21,26,23,21,13,21,21,16,13,17,23,28,28,32,35,34,29,13,13,9,14,13,12,11,12,11,11,11,11,15,20,20,26,25,27,26,25,25,23,20,15,12,12,16,13,13,12,12,10,0,0,0,0,0,0,0
000668 0000
000669 0800
00066a 1310
00066b 1613
00066c 1b16
00066d 1612
00066e 1311
00066f 1415
000670 1114
000671 1919
000672 231d
000673 2224
000674 0f1d
000675 0912
000676 0c0b
000677 0b0c
000678 080c
000679 090a
00067a 0b07
00067b 1814
00067c 1919
00067d 1216
00067e 1819
00067f 0e14
000680 080a
000681 0b0c
000682 070c
000683 080c
000684 0000
000685 0000
000686 0000
000687 0000                      .db 0,0,0,8,16,19,19,22,22,27,18,22,17,19,21,20,20,17,25,25,29,35,36,34,29,15,18,9,11,12,12,11,12,8,10,9,7,11,20,24,25,25,22,18,25,24,20,14,10,8,12,11,12,7,12,8,0,0,0,0,0,0,0,0
000688 0000
000689 0c08
00068a 1515
00068b 1617
00068c 1d1e
00068d 1816
00068e 1214
00068f 1315
000690 1514
000691 2115
000692 2422
000693 2625
000694 1421
000695 0d13
000696 0c0d
000697 1207
000698 0c0c
000699 100d
00069a 1613
00069b 1716
00069c 1518
00069d 1213
00069e 1517
00069f 1314
0006a0 0f10
0006a1 0809
0006a2 0007
0006a3 0008
0006a4 0000
0006a5 0000
0006a6 0000
0006a7 0000                      .db 0,0,8,12,21,21,23,22,30,29,22,24,20,18,21,19,20,21,21,33,34,36,37,38,33,20,19,13,13,12,7,18,12,12,13,16,19,22,22,23,24,21,19,18,23,21,20,19,16,15,9,8,7,0,8,0,0,0,0,0,0,0,0,0
0006a8 0800
0006a9 0d0c
0006aa 1716
0006ab 1b17
0006ac 1f1e
0006ad 181b
0006ae 1213
0006af 1517
0006b0 1919
0006b1 1c19
0006b2 2422
0006b3 2727
0006b4 1827
0006b5 1015
0006b6 0a0e
0006b7 1416
0006b8 0d11
0006b9 0b0d
0006ba 1411
0006bb 1614
0006bc 1514
0006bd 1514
0006be 1415
0006bf 0f13
0006c0 0c0b
0006c1 0009
0006c2 0000
0006c3 0000
0006c4 0000
0006c5 0000
0006c6 0000
0006c7 0000                      .db 0,8,12,13,22,23,23,27,30,31,27,24,19,18,23,21,25,25,25,28,34,36,39,39,39,24,21,16,14,10,22,20,17,13,13,11,17,20,20,22,20,21,20,21,21,20,19,15,11,12,9,0,0,0,0,0,0,0,0,0,0,0,0,0
0006c8 0d0d
0006c9 1012
0006ca 1515
0006cb 1e1e
0006cc 2222
0006cd 1d22
0006ce 1b1c
0006cf 1a18
0006d0 181a
0006d1 1f1a
0006d2 2422
0006d3 2927
0006d4 1c26
0006d5 181b
0006d6 1818
0006d7 1b1b
0006d8 1819
0006d9 0f0b
0006da 110f
0006db 100f
0006dc 1413
0006dd 1611
0006de 1415
0006df 1113
0006e0 0c0f
0006e1 0009
0006e2 0000
0006e3 0000
0006e4 0000
0006e5 0000
0006e6 0000
0006e7 0000                      .db 13,13,18,16,21,21,30,30,34,34,34,29,28,27,24,26,26,24,26,31,34,36,39,41,38,28,27,24,24,24,27,27,25,24,11,15,15,17,15,16,19,20,17,22,21,20,19,17,15,12,9,0,0,0,0,0,0,0,0,0,0,0,0,0
0006e8 0e09
0006e9 1313
0006ea 1a16
0006eb 231e
0006ec 2225
0006ed 201f
0006ee 1b1f
0006ef 1c1d
0006f0 171a
0006f1 241c
0006f2 2622
0006f3 2a2b
0006f4 1c23
0006f5 1c1f
0006f6 1b17
0006f7 1b1b
0006f8 191a
0006f9 0f0e
0006fa 0c0c
0006fb 0b0e
0006fc 1010
0006fd 1511
0006fe 0d11
0006ff 1111
000700 070c
000701 0000
000702 0000
000703 0000
000704 0000
000705 0000
000706 0000
000707 0000                      .db 9,14,19,19,22,26,30,35,37,34,31,32,31,27,29,28,26,23,28,36,34,38,43,42,35,28,31,28,23,27,27,27,26,25,14,15,12,12,14,11,16,16,17,21,17,13,17,17,12,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000708 1311
000709 1b18
00070a 1c17
00070b 2621
00070c 2726
00070d 2123
00070e 1d24
00070f 1c1f
000710 1d1a
000711 241f
000712 2d27
000713 292e
000714 2024
000715 1e1f
000716 1c22
000717 1a19
000718 1216
000719 1411
00071a 080c
00071b 0e0b
00071c 0b10
00071d 1313
00071e 0b12
00071f 0d0c
000720 090c
000721 000a
000722 0000
000723 0000
000724 0000
000725 0000
000726 0000
000727 0000                      .db 17,19,24,27,23,28,33,38,38,39,35,33,36,29,31,28,26,29,31,36,39,45,46,41,36,32,31,30,34,28,25,26,22,18,17,20,12,8,11,14,16,11,19,19,18,11,12,13,12,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0
000728 1712
000729 1e19
00072a 221e
00072b 2725
00072c 2a2d
00072d 2527
00072e 2124
00072f 1c20
000730 1f1b
000731 241f
000732 2c29
000733 2e2f
000734 2729
000735 2224
000736 1f22
000737 1c1c
000738 1518
000739 1414
00073a 0c0f
00073b 0c0b
00073c 0f0b
00073d 1110
00073e 0e10
00073f 0b0d
000740 0c0c
000741 090c
000742 0000
000743 0000
000744 0000
000745 0000
000746 0000
000747 0000                      .db 18,23,25,30,30,34,37,39,45,42,39,37,36,33,32,28,27,31,31,36,41,44,47,46,41,39,36,34,34,31,28,28,24,21,20,20,15,12,11,12,11,15,16,17,16,14,13,11,12,12,12,9,0,0,0,0,0,0,0,0,0,0,0,0
000748 1a19
000749 201e
00074a 2122
00074b 2824
00074c 2e2d
00074d 252a
00074e 2324
00074f 1e1e
000750 181b
000751 2a1c
000752 2c2c
000753 2b2e
000754 2828
000755 1d26
000756 171a
000757 1918
000758 1517
000759 0f11
00075a 0d0e
00075b 0c0b
00075c 0e0d
00075d 100b
00075e 0d0e
00075f 0609
000760 0b08
000761 0007
000762 0000
000763 0000
000764 0000
000765 0000
000766 0000
000767 0000                      .db 25,26,30,32,34,33,36,40,45,46,42,37,36,35,30,30,27,24,28,42,44,44,46,43,40,40,38,29,26,23,24,25,23,21,17,15,14,13,11,12,13,14,11,16,14,13,9,6,8,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0
000768 201f
000769 1f24
00076a 2723
00076b 2926
00076c 302e
00076d 2a2e
00076e 2328
00076f 2122
000770 1a1c
000771 2219
000772 2b27
000773 292e
000774 2327
000775 1d23
000776 1819
000777 1518
000778 1012
000779 0a0e
00077a 090d
00077b 0806
00077c 0b0d
00077d 0f0e
00077e 0a0a
00077f 0b0e
000780 0907
000781 0000
000782 0000
000783 0000
000784 0000
000785 0000
000786 0000
000787 0000                      .db 31,32,36,31,35,39,38,41,46,48,46,42,40,35,34,33,28,26,25,34,39,43,46,41,39,35,35,29,25,24,24,21,18,16,14,10,13,9,6,8,13,11,14,15,10,10,14,11,7,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000788 2220
000789 2726
00078a 2727
00078b 2d2b
00078c 332e
00078d 2d2f
00078e 272a
00078f 2224
000790 1b1f
000791 1f16
000792 2827
000793 2b2c
000794 202b
000795 1a1b
000796 1519
000797 1517
000798 0d10
000799 070a
00079a 0009
00079b 0000
00079c 0609
00079d 0f0b
00079e 0e0f
00079f 0c0e
0007a0 080c
0007a1 0000
0007a2 0000
0007a3 0000
0007a4 0000
0007a5 0000
0007a6 0000
0007a7 0000                      .db 32,34,38,39,39,39,43,45,46,51,47,45,42,39,36,34,31,27,22,31,39,40,44,43,43,32,27,26,25,21,23,21,16,13,10,7,9,0,0,0,9,6,11,15,15,14,14,12,12,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0007a8 1b18
0007a9 221f
0007aa 2622
0007ab 2a28
0007ac 302b
0007ad 292c
0007ae 2326
0007af 1d22
0007b0 1b1f
0007b1 1f1d
0007b2 231f
0007b3 2b28
0007b4 2929
0007b5 1718
0007b6 1116
0007b7 1410
0007b8 1414
0007b9 0c11
0007ba 080c
0007bb 0000
0007bc 0000
0007bd 0c08
0007be 0a0b
0007bf 0a0d
0007c0 0008
0007c1 0000
0007c2 0000
0007c3 0000
0007c4 0000
0007c5 0000
0007c6 0000
0007c7 0000                      .db 24,27,31,34,34,38,40,42,43,48,44,41,38,35,34,29,31,27,29,31,31,35,40,43,41,41,24,23,22,17,16,20,20,20,17,12,12,8,0,0,0,0,8,12,11,10,13,10,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0007c8 1916
0007c9 211b
0007ca 2421
0007cb 2728
0007cc 3030
0007cd 2429
0007ce 2123
0007cf 1c21
0007d0 161c
0007d1 191b
0007d2 1f1a
0007d3 2727
0007d4 2023
0007d5 1716
0007d6 0d17
0007d7 1109
0007d8 1011
0007d9 0811
0007da 000a
0007db 0000
0007dc 0000
0007dd 0a00
0007de 0a06
0007df 0b0b
0007e0 0008
0007e1 0000
0007e2 0000
0007e3 0000
0007e4 0000
0007e5 0000
0007e6 0000
0007e7 0000                      .db 22,25,27,33,33,36,40,39,48,48,41,36,35,33,33,28,28,22,27,25,26,31,39,39,35,32,22,23,23,13,9,17,17,16,17,8,10,0,0,0,0,0,0,10,6,10,11,11,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0007e8 1414
0007e9 1c19
0007ea 221e
0007eb 2a24
0007ec 2f2a
0007ed 1f24
0007ee 1d1e
0007ef 1f21
0007f0 1b1e
0007f1 1a1b
0007f2 1d19
0007f3 2223
0007f4 1f1f
0007f5 1114
0007f6 0c0d
0007f7 1107
0007f8 0e11
0007f9 0d0f
0007fa 0009
0007fb 0000
0007fc 0000
0007fd 0000
0007fe 0000
0007ff 0b0a
000800 0008
000801 0000
000802 0000
000803 0000
000804 0000
000805 0000
000806 0000
000807 0000                      .db 20,20,25,28,30,34,36,42,42,47,36,31,30,29,33,31,30,27,27,26,25,29,35,34,31,31,20,17,13,12,7,17,17,14,15,13,9,0,0,0,0,0,0,0,0,0,10,11,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000808 1412
000809 2117
00080a 2121
00080b 2823
00080c 2a2a
00080d 1b1f
00080e 1418
00080f 1e11
000810 191e
000811 1519
000812 1c17
000813 2120
000814 1f1a
000815 0f1e
000816 0a0d
000817 1111
000818 0c0f
000819 0a08
00081a 0000
00081b 0000
00081c 0000
00081d 0000
00081e 0000
00081f 0a00
000820 0000
000821 0000
000822 0000
000823 0000
000824 0000
000825 0000
000826 0000
000827 0000                      .db 18,20,23,33,33,33,35,40,42,42,31,27,24,20,17,30,30,25,25,21,23,28,32,33,26,31,30,15,13,10,17,17,15,12,8,10,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000828 1615
000829 1d19
00082a 1e1e
00082b 2621
00082c 272a
00082d 1722
00082e 1417
00082f 1213
000830 171b
000831 1616
000832 1916
000833 161b
000834 1d12
000835 0f1e
000836 090d
000837 0d0d
000838 0d0d
000839 080b
00083a 0000
00083b 0000
00083c 0000
00083d 0000
00083e 0000
00083f 0000
000840 0000
000841 0000
000842 0000
000843 0000
000844 0000
000845 0000
000846 0000
000847 0000                      .db 21,22,25,29,30,30,33,38,42,39,34,23,23,20,19,18,27,23,22,22,22,25,27,22,18,29,30,15,13,9,13,13,13,13,11,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000848 1110
000849 1b15
00084a 1e1a
00084b 291e
00084c 2229
00084d 1422
00084e 1414
00084f 1110
000850 1216
000851 1616
000852 1911
000853 1519
000854 0e11
000855 0d1c
000856 0a0c
000857 0c0d
000858 090b
000859 0007
00085a 0000
00085b 0000
00085c 0000
00085d 0000
00085e 0000
00085f 0000
000860 0000
000861 0000
000862 0000
000863 0000
000864 0000
000865 0000
000866 0000
000867 0000                      .db 16,17,21,27,26,30,30,41,41,34,34,20,20,20,16,17,22,18,22,22,17,25,25,21,17,14,28,13,12,10,13,12,11,9,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000868 0d0a
000869 1914
00086a 1c17
00086b 241d
00086c 1d24
00086d 1819
00086e 1311
00086f 0f0f
000870 0d0d
000871 0c11
000872 1210
000873 1316
000874 0c0f
000875 080c
000876 0909
000877 090c
000878 080b
000879 0000
00087a 0000
00087b 0000
00087c 0000
00087d 0000
00087e 0000
00087f 0000
000880 0000
000881 0000
000882 0000
000883 0000
000884 0000
000885 0000
000886 0000
000887 0000                      .db 10,13,20,25,23,28,29,36,36,29,25,24,17,19,15,15,13,13,17,12,16,18,22,19,15,12,12,8,9,9,12,9,11,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000888 110f
000889 1816
00088a 1919
00088b 1c1c
00088c 1a1f
00088d 1718
00088e 0d10
00088f 0a0c
000890 0c0b
000891 0b0c
000892 110d
000893 0d12
000894 0a08
000895 0008
000896 0000
000897 0008
000898 0008
000899 0000
00089a 0000
00089b 0000
00089c 0000
00089d 0000
00089e 0000
00089f 0000
0008a0 0000
0008a1 0000
0008a2 0000
0008a3 0000
0008a4 0000
0008a5 0000
0008a6 0000
0008a7 0000                      .db 15,17,22,24,25,25,28,28,31,26,24,23,16,13,12,10,11,12,12,11,13,17,18,13,8,10,8,0,0,0,8,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0008a8 0c07
0008a9 1512
0008aa 1919
0008ab 171c
0008ac 1a18
0008ad 1415
0008ae 0910
0008af 0007
0008b0 0c09
0008b1 060d
0008b2 110b
0008b3 0b0d
0008b4 0007
0008b5 0000
0008b6 0000
0008b7 0000
0008b8 0000
0008b9 0000
0008ba 0000
0008bb 0000
0008bc 0000
0008bd 0000
0008be 0000
0008bf 0000
0008c0 0000
0008c1 0000
0008c2 0000
0008c3 0000
0008c4 0000
0008c5 0000
0008c6 0000
0008c7 0000                      .db 7,12,18,21,25,25,28,23,24,26,21,20,16,9,7,0,9,12,13,6,11,17,13,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0008c8 0d0c
0008c9 150e
0008ca 1419
0008cb 141c
0008cc 1a15
0008cd 1017
0008ce 0b0e
0008cf 0009
0008d0 0a00
0008d1 0d0d
0008d2 0e0e
0008d3 0809
0008d4 0000
0008d5 0000
0008d6 0000
0008d7 0000
0008d8 0000
0008d9 0000
0008da 0000
0008db 0000
0008dc 0000
0008dd 0000
0008de 0000
0008df 0000
0008e0 0000
0008e1 0000
0008e2 0000
0008e3 0000
0008e4 0000
0008e5 0000
0008e6 0000
0008e7 0000                      .db 12,13,14,21,25,20,28,20,21,26,23,16,14,11,9,0,0,10,13,13,14,14,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0008e8 0c08
0008e9 1716
0008ea 1a18
0008eb 141c
0008ec 1510
0008ed 1213
0008ee 090d
0008ef 0000
0008f0 0000
0008f1 0809
0008f2 0b0a
0008f3 0007
0008f4 0000
0008f5 0000
0008f6 0000
0008f7 0000
0008f8 0000
0008f9 0000
0008fa 0000
0008fb 0000
0008fc 0000
0008fd 0000
0008fe 0000
0008ff 0000
000900 0000
000901 0000
000902 0000
000903 0000
000904 0000
000905 0000
000906 0000
000907 0000                      .db 8,12,22,23,24,26,28,20,16,21,19,18,13,9,0,0,0,0,9,8,10,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000908 0d0b
000909 1310
00090a 120e
00090b 0d17
00090c 1212
00090d 1011
00090e 0b0c
00090f 000a
000910 0000
000911 0b08
000912 070c
000913 0000
000914 0000
000915 0000
000916 0000
000917 0000
000918 0000
000919 0000
00091a 0000
00091b 0000
00091c 0000
00091d 0000
00091e 0000
00091f 0000
000920 0000
000921 0000
000922 0000
000923 0000
000924 0000
000925 0000
000926 0000
000927 0000                      .db 11,13,16,19,14,18,23,13,18,18,17,16,12,11,10,0,0,0,8,11,12,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000928 0a00
000929 100d
00092a 0f0c
00092b 0b0a
00092c 0f0d
00092d 0b0a
00092e 090b
00092f 0000
000930 0900
000931 0f0a
000932 070c
000933 0000
000934 0000
000935 0000
000936 0000
000937 0000
000938 0000
000939 0000
00093a 0000
00093b 0000
00093c 0000
00093d 0000
00093e 0000
00093f 0000
000940 0000
000941 0000
000942 0000
000943 0000
000944 0000
000945 0000
000946 0000
000947 0000                      .db 0,10,13,16,12,15,10,11,13,15,10,11,11,9,0,0,0,9,10,15,12,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000948 0000
000949 0f08
00094a 0b07
00094b 0a06
00094c 0d08
00094d 070b
00094e 0b0b
00094f 0a0a
000950 0b0a
000951 0f0f
000952 080a
000953 0000
000954 0000
000955 0000
000956 0000
000957 0000
000958 0000
000959 0000
00095a 0000
00095b 0000
00095c 0000
00095d 0000
00095e 0000
00095f 0000
000960 0000
000961 0000
000962 0000
000963 0000
000964 0000
000965 0000
000966 0000
000967 0000                      .db 0,0,8,15,7,11,6,10,8,13,11,7,11,11,10,10,10,11,15,15,10,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000968 0000
000969 0d0a
00096a 0b09
00096b 0006
00096c 0a00
00096d 0a0b
00096e 0e0b
00096f 0d0e
000970 0c0a
000971 1311
000972 0c12
000973 0909
000974 0000
000975 0000
000976 0000
000977 0000
000978 0000
000979 0000
00097a 0000
00097b 0000
00097c 0000
00097d 0000
00097e 0000
00097f 0000
000980 0000
000981 0000
000982 0000
000983 0000
000984 0000
000985 0000
000986 0000
000987 0000                      .db 0,0,10,13,9,11,6,0,0,10,11,10,11,14,14,13,10,12,17,19,18,12,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000988 0000
000989 0b0a
00098a 0608
00098b 0000
00098c 0000
00098d 0008
00098e 0609
00098f 100f
000990 1010
000991 1514
000992 0f12
000993 0b0d
000994 0009
000995 0008
000996 0000
000997 0000
000998 0000
000999 0000
00099a 0000
00099b 0000
00099c 0000
00099d 0000
00099e 0000
00099f 0000
0009a0 0000
0009a1 0000
0009a2 0000
0009a3 0000
0009a4 0000
0009a5 0000
0009a6 0000
0009a7 0000                      .db 0,0,10,11,8,6,0,0,0,0,8,0,9,6,15,16,16,16,20,21,18,15,13,11,9,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009a8 0000
0009a9 0a00
0009aa 0000
0009ab 0000
0009ac 0000
0009ad 0000
0009ae 0b08
0009af 110f
0009b0 1513
0009b1 1817
0009b2 1114
0009b3 1114
0009b4 070c
0009b5 080b
0009b6 0000
0009b7 0006
0009b8 0000
0009b9 0000
0009ba 0000
0009bb 0000
0009bc 0000
0009bd 0000
0009be 0000
0009bf 0000
0009c0 0000
0009c1 0000
0009c2 0000
0009c3 0000
0009c4 0000
0009c5 0000
0009c6 0000
0009c7 0000                      .db 0,0,0,10,0,0,0,0,0,0,0,0,8,11,15,17,19,21,23,24,20,17,20,17,12,7,11,8,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009c8 0000
0009c9 0000
0009ca 0000
0009cb 0000
0009cc 0000
0009cd 0a00
0009ce 0d0c
0009cf 110f
0009d0 1615
0009d1 1819
0009d2 1616
0009d3 1519
0009d4 0e10
0009d5 090b
0009d6 0a00
0009d7 080b
0009d8 0000
0009d9 0000
0009da 0000
0009db 0000
0009dc 0000
0009dd 0000
0009de 0000
0009df 0000
0009e0 0000
0009e1 0000
0009e2 0000
0009e3 0000
0009e4 0000
0009e5 0000
0009e6 0000
0009e7 0000                      .db 0,0,0,0,0,0,0,0,0,0,0,10,12,13,15,17,21,22,25,24,22,22,25,21,16,14,11,9,0,10,11,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009e8 0000
0009e9 0000
0009ea 0000
0009eb 0600
0009ec 0a00
0009ed 0a00
0009ee 0f0d
0009ef 1310
0009f0 1916
0009f1 1c1a
0009f2 1317
0009f3 161a
0009f4 1112
0009f5 0e11
0009f6 0f0a
0009f7 080b
0009f8 0006
0009f9 0000
0009fa 0000
0009fb 0000
0009fc 0000
0009fd 0000
0009fe 0000
0009ff 0000
000a00 0000
000a01 0000
000a02 0000
000a03 0000
000a04 0000
000a05 0000
000a06 0000
000a07 0000                      .db 0,0,0,0,0,0,0,6,0,10,0,10,13,15,16,19,22,25,26,28,23,19,26,22,18,17,17,14,10,15,11,8,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000a08 0000
000a09 0000
000a0a 0000
000a0b 0b08
000a0c 0b06
000a0d 0d09
000a0e 130f
000a0f 1614
000a10 1c18
000a11 211e
000a12 1d20
000a13 1b1b
000a14 0817
000a15 130f
000a16 0f11
000a17 0e0e
000a18 060b
000a19 0000
000a1a 0000
000a1b 0000
000a1c 0000
000a1d 0000
000a1e 0000
000a1f 0000
000a20 0000
000a21 0000
000a22 0000
000a23 0000
000a24 0000
000a25 0000
000a26 0000
000a27 0000                      .db 0,0,0,0,0,0,8,11,6,11,9,13,15,19,20,22,24,28,30,33,32,29,27,27,23,8,15,19,17,15,14,14,11,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000a28 0000
000a29 0000
000a2a 0000
000a2b 0c07
000a2c 0d09
000a2d 1211
000a2e 1313
000a2f 2727
000a30 2b2a
000a31 2221
000a32 2025
000a33 181c
000a34 0c11
000a35 1508
000a36 1214
000a37 1111
000a38 090b
000a39 0000
000a3a 0000
000a3b 0000
000a3c 0000
000a3d 0000
000a3e 0000
000a3f 0000
000a40 0000
000a41 0000
000a42 0000
000a43 0000
000a44 0000
000a45 0000
000a46 0000
000a47 0000                      .db 0,0,0,0,0,0,7,12,9,13,17,18,19,19,39,39,42,43,33,34,37,32,28,24,17,12,8,21,20,18,17,17,11,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000a48 0000
000a49 0000
000a4a 0900
000a4b 0f0d
000a4c 100f
000a4d 1112
000a4e 1515
000a4f 2715
000a50 2b29
000a51 2520
000a52 2829
000a53 171c
000a54 1b12
000a55 1918
000a56 1318
000a57 0f11
000a58 060b
000a59 0000
000a5a 0000
000a5b 0000
000a5c 0000
000a5d 0000
000a5e 0000
000a5f 0000
000a60 0000
000a61 0000
000a62 0000
000a63 0000
000a64 0000
000a65 0000
000a66 0000
000a67 0000                      .db 0,0,0,0,0,9,13,15,15,16,18,17,21,21,21,39,41,43,32,37,41,40,28,23,18,27,24,25,24,19,17,15,11,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000a68 0000
000a69 0000
000a6a 0000
000a6b 0b0a
000a6c 1110
000a6d 0d17
000a6e 1511
000a6f 1c1a
000a70 2c24
000a71 2a2c
000a72 2429
000a73 1c21
000a74 1d19
000a75 1a1a
000a76 1417
000a77 1011
000a78 0a10
000a79 0009
000a7a 0000
000a7b 0000
000a7c 0000
000a7d 0000
000a7e 0000
000a7f 0000
000a80 0000
000a81 0000
000a82 0000
000a83 0000
000a84 0000
000a85 0000
000a86 0000
000a87 0000                      .db 0,0,0,0,0,0,10,11,16,17,23,13,17,21,26,28,36,44,44,42,41,36,33,28,25,29,26,26,23,20,17,16,16,10,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000a88 0900
000a89 0709
000a8a 070a
000a8b 100d
000a8c 1514
000a8d 1e1a
000a8e 1f1c
000a8f 211e
000a90 2d27
000a91 2c2c
000a92 292c
000a93 1f28
000a94 1f1c
000a95 191a
000a96 1519
000a97 1212
000a98 0f0c
000a99 070e
000a9a 0000
000a9b 0000
000a9c 0000
000a9d 0000
000a9e 0000
000a9f 0000
000aa0 0000
000aa1 0000
000aa2 0000
000aa3 0000
000aa4 0000
000aa5 0000
000aa6 0000
000aa7 0000                      .db 0,9,9,7,10,7,13,16,20,21,26,30,28,31,30,33,39,45,44,44,44,41,40,31,28,31,26,25,25,21,18,18,12,15,14,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000aa8 0c09
000aa9 0c0c
000aaa 0c0c
000aab 1210
000aac 1615
000aad 201d
000aae 241f
000aaf 2522
000ab0 2e2a
000ab1 3031
000ab2 252c
000ab3 2123
000ab4 2124
000ab5 181d
000ab6 1617
000ab7 1212
000ab8 1111
000ab9 0c0c
000aba 0008
000abb 0000
000abc 0000
000abd 0000
000abe 0000
000abf 0000
000ac0 0000
000ac1 0000
000ac2 0000
000ac3 0000
000ac4 0000
000ac5 0000
000ac6 0000
000ac7 0000                      .db 9,12,12,12,12,12,16,18,21,22,29,32,31,36,34,37,42,46,49,48,44,37,35,33,36,33,29,24,23,22,18,18,17,17,12,12,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000ac8 0b0b
000ac9 0a07
000aca 080a
000acb 0e0a
000acc 1712
000acd 201c
000ace 2624
000acf 2a28
000ad0 2d2c
000ad1 3131
000ad2 282c
000ad3 2525
000ad4 2324
000ad5 1e22
000ad6 191a
000ad7 1517
000ad8 1414
000ad9 0e0f
000ada 090c
000adb 0000
000adc 0000
000add 0000
000ade 0000
000adf 0000
000ae0 0000
000ae1 0000
000ae2 0000
000ae3 0000
000ae4 0000
000ae5 0000
000ae6 0000
000ae7 0000                      .db 11,11,7,10,10,8,10,14,18,23,28,32,36,38,40,42,44,45,49,49,44,40,37,37,36,35,34,30,26,25,23,21,20,20,15,14,12,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000ae8 0700
000ae9 0000
000aea 0700
000aeb 0f0c
000aec 1511
000aed 1b1a
000aee 2625
000aef 2722
000af0 2d2a
000af1 2c30
000af2 2428
000af3 2124
000af4 1e22
000af5 1a1d
000af6 1417
000af7 1316
000af8 1213
000af9 0a0e
000afa 0008
000afb 0000
000afc 0000
000afd 0000
000afe 0000
000aff 0000
000b00 0000
000b01 0000
000b02 0000
000b03 0000
000b04 0000
000b05 0000
000b06 0000
000b07 0000                      .db 0,7,0,0,0,7,12,15,17,21,26,27,37,38,34,39,42,45,48,44,40,36,36,33,34,30,29,26,23,20,22,19,19,18,14,10,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000b08 0000
000b09 0000
000b0a 0000
000b0b 0c0a
000b0c 130d
000b0d 1816
000b0e 1f1d
000b0f 2622
000b10 2723
000b11 2a28
000b12 2127
000b13 1f1e
000b14 181c
000b15 1a1a
000b16 1415
000b17 1314
000b18 1213
000b19 0f10
000b1a 080c
000b1b 0000
000b1c 0000
000b1d 0000
000b1e 0000
000b1f 0000
000b20 0000
000b21 0000
000b22 0000
000b23 0000
000b24 0000
000b25 0000
000b26 0000
000b27 0000                      .db 0,0,0,0,0,0,10,12,13,19,22,24,29,31,34,38,35,39,40,42,39,33,30,31,28,24,26,26,21,20,20,19,19,18,16,15,12,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                                 
                                 ;HARD CODE STRINGS
000b28 4e49
000b29 5550
000b2a 2054
000b2b 3a58
000b2c 0000                      INPUT_X:	.DB "INPUT X:",0, 0
000b2d 4e49
000b2e 5550
000b2f 2054
000b30 3a59
000b31 0000                      INPUT_Y: .DB "INPUT Y:", 0, 0
000b32 4553
000b33 5241
000b34 4843
000b35 4e49
000b36 0047                      STRING_SEARCH: .DB "SEARCHING", 0
000b37 4f46
000b38 4e55
000b39 2044
000b3a 0020                      STRING_FOUND: .DB "FOUND  ", 0
000b3b 4f4e
000b3c 2054
000b3d 4f46
000b3e 4e55
000b3f 0044                      STRING_NOT_FOUND: .DB "NOT FOUND", 0
000b40 4241
000b41 524f
000b42 0054                      STRING_ABORT: .DB "ABORT", 0
000b43 4552
000b44 4441
000b45 0059                      READY_TO_SEARCH: .DB "READY", 0
                                 ;USE DESG TO STORE ACCIDENT LOCATION
                                 .DSEG


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :   0 z  :  10 r0 :   6 r1 :   5 r2 :   2 r3 :   2 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 194 r17:  37 r18:  27 r19:  13 r20:  14 
r21:  20 r22:   6 r23:  40 r24:  22 r25:  22 r26:   0 r27:   0 r28:   0 
r29:   0 r30:  10 r31:  10 
Registers used: 17 out of 35 (48.6%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   3 adiw  :   2 and   :   1 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   1 break :   0 breq  :  16 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 brlt  :   0 brmi  :   0 
brne  :   7 brpl  :   0 brsh  :   3 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  27 cbi   :   6 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  27 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   4 cpc   :   3 
cpi   :  29 cpse  :   0 dec   :   3 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :  13 jmp   :   2 ld    :   2 ldd   :   0 ldi   :  99 
lds   :   2 lpm   :   3 lsl   :   2 lsr   :   0 mov   :  28 movw  :   0 
mul   :   2 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  21 pop   :  48 push  :  48 rcall : 126 ret   :  21 
reti  :   0 rjmp  :  30 rol   :   0 ror   :   0 sbc   :   3 sbci  :   0 
sbi   :   4 sbic  :   0 sbis  :   0 sbiw  :   3 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :  11 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   2 std   :   0 sts   :   9 sub   :   0 subi  :  19 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 42 out of 116 (36.2%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00168c   1370   4156   5526  262144   2.1%
[.dseg] 0x000200 0x000202      0      2      2    8192   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
