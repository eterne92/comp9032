
AVRASM ver. 2.2.6  D:\workspace\comp9032\project\final_project\final_project\main.asm Wed Oct 18 23:00:40 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
D:\workspace\comp9032\project\final_project\final_project\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
D:\workspace\comp9032\project\final_project\final_project\main.asm(9): Including file 'D:\workspace\comp9032\project\final_project\final_project\constant.inc'
D:\workspace\comp9032\project\final_project\final_project\main.asm(18): Including file 'D:\workspace\comp9032\project\final_project\final_project\macros.asm'
D:\workspace\comp9032\project\final_project\final_project\main.asm(197): Including file 'D:\workspace\comp9032\project\final_project\final_project\keypad.asm'
D:\workspace\comp9032\project\final_project\final_project\main.asm(198): Including file 'D:\workspace\comp9032\project\final_project\final_project\lcd.asm'
D:\workspace\comp9032\project\final_project\final_project\main.asm(199): Including file 'D:\workspace\comp9032\project\final_project\final_project\wait.asm'
D:\workspace\comp9032\project\final_project\final_project\main.asm(200): Including file 'D:\workspace\comp9032\project\final_project\final_project\drone.asm'
D:\workspace\comp9032\project\final_project\final_project\main.asm(201): Including file 'D:\workspace\comp9032\project\final_project\final_project\generalfunc.asm'
D:\workspace\comp9032\project\final_project\final_project\main.asm(202): Including file 'D:\workspace\comp9032\project\final_project\final_project\mountain.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
D:\workspace\comp9032\project\final_project\final_project\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
D:\workspace\comp9032\project\final_project\final_project\main.asm(9): Including file 'D:\workspace\comp9032\project\final_project\final_project\constant.inc'
D:\workspace\comp9032\project\final_project\final_project\main.asm(18): Including file 'D:\workspace\comp9032\project\final_project\final_project\macros.asm'
D:\workspace\comp9032\project\final_project\final_project\main.asm(197): Including file 'D:\workspace\comp9032\project\final_project\final_project\keypad.asm'
D:\workspace\comp9032\project\final_project\final_project\main.asm(198): Including file 'D:\workspace\comp9032\project\final_project\final_project\lcd.asm'
D:\workspace\comp9032\project\final_project\final_project\main.asm(199): Including file 'D:\workspace\comp9032\project\final_project\final_project\wait.asm'
D:\workspace\comp9032\project\final_project\final_project\main.asm(200): Including file 'D:\workspace\comp9032\project\final_project\final_project\drone.asm'
D:\workspace\comp9032\project\final_project\final_project\main.asm(201): Including file 'D:\workspace\comp9032\project\final_project\final_project\generalfunc.asm'
D:\workspace\comp9032\project\final_project\final_project\main.asm(202): Including file 'D:\workspace\comp9032\project\final_project\final_project\mountain.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; motor.asm
                                 ;
                                 ; Created: 2017/9/30 9:19:13
                                 ; Author : shaoh
                                 ;
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .include "constant.inc"
                                 
                                 ;
                                 ;
                                 ;
                                 ;PORTS USING FOR DIFFERENT I/O DEVICES
                                 .EQU KEY_PORT = PORTL
                                 .EQU KEY_DDR = DDRL
                                 .EQU LCD_DATA_PORT = PORTF
                                 .EQU LCD_DATA_DDR = DDRF
                                 .EQU LCD_CTRL_PORT = PORTA
                                 .EQU LCD_CTRL_DDR = DDRA
                                 .EQU LED_PORT = PORTC
                                 .EQU LED_DDR = DDRC
                                 ;MOTOR SPEED(USING FOR PWM)
                                 .EQU FAST_MOTOR_SPEED = 100
                                 .EQU HALF_MOTOR_SPEED = 50
                                 .EQU STOP_MOTOR_SPEED = 0
                                 ;MOUNTAIN MAP BOARDER
                                 .EQU BORDER_X = 63
                                 .EQU BORDER_Y = 63
                                 ;
                                 .DEF TEMP = R16
                                 .DEF TEMP2 = R17
                                 .DEF DIRECTION = R18
                                 .DEF CURRENT_HEIGHT = R19
                                 .DEF CURRENT_X = R20
                                 .DEF CURRENT_Y = R21
                                 
                                 
                                 .include "macros.asm"
                                 
                                 ;STORE
                                 .MACRO STORE
                                 	.IF @0 > 0X40
                                 		STS @0, @1
                                 	.ELSE
                                 		OUT @0, @1
                                 	.ENDIF
                                 .ENDMACRO
                                 ;LOAD
                                 .MACRO LOAD
                                 	.IF @1 > 0X40
                                 		LDS @0, @1
                                 	.ELSE
                                 		IN @0, @1
                                 	.ENDIF
                                 .ENDMACRO
                                 
                                 ;WRITE DATA INTO LCD, USING SOME CONSTANT VALUE
                                 .MACRO LCD_WRITE_DATA
                                 	LDI R16, @0
                                 	RCALL DATA_WRITE
                                 	RCALL LCD_WAIT
                                 .ENDMACRO
                                 
                                 ;WRITE DATA INTO LCD, USING SOME register
                                 .MACRO LCD_WRITE_DATA_reg
                                 	mov R16, @0
                                 	RCALL DATA_WRITE
                                 	RCALL LCD_WAIT
                                 .ENDMACRO
                                 
                                 ;WRITE DATA INTO LCD_COM, USING SOME CONSTANT VALUE
                                 .MACRO LCD_WRITE_COM
                                 	LDI R16, @0
                                 	RCALL COM_WRITE
                                 	RCALL LCD_WAIT
                                 .ENDMACRO
                                 
                                 .macro LCD_CLEAR
                                 	rcall lcd_wait
                                 	lcd_write_com 0B00000001
                                 .endmacro
                                 
                                 ;WAIT FOR MORE THAN 1MS USING SOME CONSTANT VALUE
                                 .MACRO MACRO_WAIT
                                 	LDI R16, @0
                                 	CALL WAIT_MORE
                                 .ENDMACRO
                                 
                                 ;FLY CONTROL
                                 .MACRO FLY_CTRL
                                 	LDI R16, @0
                                 	CALL PWM_DUTY
                                 
                                 .org 0	;set interrupt vertex
000000 c12f                      	rjmp RESET
                                 .org INT0addr
000002 940c 00a6                 	jmp SEARCH_START
                                 .org INT1addr
000004 940c 00ef                 	jmp search_abort
                                 .org 0x80
                                 main:
                                 	input_x_loop:
000080 d141
000081 e001
000082 d15a
000083 d13e                      		lcd_clear
000084 e400                      		ldi temp, low(input_x<<1)
000085 e116                      		ldi temp2, high(input_x<<1)
000086 d1b9                      		rcall lcd_display_string
000087 940e 019e                 		call KEY_VALUE
000089 3f7f                      		cpi R23, -1
00008a f3a9                      		breq input_x_loop
00008b 3470                      		cpi R23, 64
00008c f798                      		brsh input_x_loop
00008d 2e27                      		mov r2, r23
                                 
                                 	input_y_loop:
00008e d133
00008f e001
000090 d14c
000091 d130                      		lcd_clear
000092 e40a                      		ldi temp, low(input_y<<1)
000093 e116                      		ldi temp2, high(input_y<<1)
000094 d1ab                      		rcall lcd_display_string
000095 940e 019e                 		call KEY_VALUE
000097 3f7f                      		cpi R23, -1
000098 f3a9                      		breq input_y_loop
000099 3470                      		cpi R23, 64
00009a f798                      		brsh input_y_loop
00009b 2e37                      		mov r3, r23
                                 
00009c d125
00009d e001
00009e d13e
00009f d122                      	lcd_clear
0000a0 e706                      	ldi temp, low(ready_to_search<<1)
0000a1 e116                      	ldi temp2, high(ready_to_search<<1)
0000a2 d19d                      	rcall lcd_display_string
                                 	
0000a3 940e 0293                 	call set_location
                                 
                                 	wait_for_interrupt:			;in search start interrupt, set temp to 0
0000a5 cfff                      		rjmp wait_for_interrupt
                                 	
                                 search_start:
0000a6 e002                      	ldi temp, 1<<INT1
0000a7 bb0d                      	STORE EIMSK, temp			;disable the ex_int0
0000a8 9478                      	sei
0000a9 ef4f                      	ldi current_x, -1			;set start position
0000aa e050                      	ldi current_y, 0
0000ab e4e0                      	ldi zl, low(mountain<<1)
0000ac e0f6                      	ldi zh, high(mountain<<1)
0000ad 9731                      	sbiw z, 1
0000ae ef2f                      	ser direction
0000af e03a                      	ldi current_height, 10
0000b0 e604
0000b1 940e 02fa                 	fly_ctrl fast_motor_speed
                                 	fly_loop:
0000b3 d10e
0000b4 e001
0000b5 d127
0000b6 d10b                      		lcd_clear
0000b7 3f7e                      		cpi r23, -2
0000b8 f1b1                      		breq search_abort
                                 		;find next position
0000b9 d1a2                      		rcall fly_to_next_pos
0000ba 3f7f                      		cpi r23, -1
0000bb f1f1                      		breq search_not_found
0000bc 5f7f                      		subi r23, -1
0000bd 1737                      		cp current_height, r23
0000be f160                      		brlo fly_high
                                 	search:
0000bf 2f37                      		mov current_height, r23
                                 		;display now pos
0000c0 e708
0000c1 d112
0000c2 d0ff                      		lcd_write_data 'x'
0000c3 e30a
0000c4 d10f
0000c5 d0fc                      		lcd_write_data ':'
0000c6 2f04                      		mov temp, current_x
0000c7 d144                      		rcall lcd_display_number
0000c8 e200
0000c9 d10a
0000ca d0f7                      		lcd_write_data ' '
0000cb e709
0000cc d107
0000cd d0f4                      		lcd_write_data 'y'
0000ce e30a
0000cf d104
0000d0 d0f1                      		lcd_write_data ':'
0000d1 2f05                      		mov temp, current_y
0000d2 d139                      		rcall lcd_display_number
0000d3 ec00
0000d4 d108
0000d5 d0ec                      		lcd_write_com 0b11000000
0000d6 e70a
0000d7 d0fc
0000d8 d0e9                      		lcd_write_data 'z'
0000d9 e30a
0000da d0f9
0000db d0e6                      		lcd_write_data ':'
0000dc 2f03                      		mov temp, current_height
0000dd d12e                      		rcall lcd_display_number
0000de e200
0000df d0f4
0000e0 d0e1                      		lcd_write_data ' '
0000e1 e504                      		ldi temp, low(string_search<<1)
0000e2 e116                      		ldi temp2, high(string_search<<1)
0000e3 d15c                      		rcall lcd_display_string
0000e4 d198                      		rcall drone_search
0000e5 e00f
0000e6 940e 0256                 		macro_wait 15
                                 
0000e8 3070                      		cpi r23, 0
0000e9 f249                      		breq fly_loop	;if not found, keep flying
0000ea c01a                      		rjmp search_found
                                 	
                                 	fly_high:
0000eb e604
0000ec 940e 02fa                 		fly_ctrl fast_motor_speed
0000ee cfd0                      		rjmp search
                                 
                                 	search_abort:
0000ef d0d2
0000f0 e001
0000f1 d0eb
0000f2 d0cf                      		lcd_clear
0000f3 e700                      		ldi temp, low(string_abort<<1)
0000f4 e116                      		ldi temp2, high(string_abort<<1)
0000f5 d14a                      		rcall lcd_display_string
0000f6 e000
0000f7 940e 02fa                 		fly_ctrl stop_motor_speed
0000f9 c035                      		rjmp end
                                 	search_not_found:
0000fa d0c7
0000fb e001
0000fc d0e0
0000fd d0c4                      		lcd_clear
0000fe e606                      		ldi temp, low(string_not_found<<1)
0000ff e116                      		ldi temp2, high(string_not_found<<1)
000100 d13f                      		rcall lcd_display_string
000101 e000
000102 940e 02fa                 		fly_ctrl stop_motor_speed
000104 c02a                      		rjmp end
                                 
                                 	search_found:
000105 d0bc
000106 e001
000107 d0d5
000108 d0b9                      		lcd_clear
000109 e50e                      		ldi temp, low(string_found<<1)
00010a e116                      		ldi temp2, high(string_found<<1)
00010b d134                      		rcall lcd_display_string
00010c e708
00010d d0c6
00010e d0b3                      		lcd_write_data 'x'
00010f e30a
000110 d0c3
000111 d0b0                      		lcd_write_data ':'
000112 2f04                      		mov temp, current_x
000113 d0f8                      		rcall lcd_display_number
000114 ec00
000115 d0c7
000116 d0ab                      		lcd_write_com 0b11000000
000117 e709
000118 d0bb
000119 d0a8                      		lcd_write_data 'y'
00011a e30a
00011b d0b8
00011c d0a5                      		lcd_write_data ':'
00011d 2f05                      		mov temp, current_y
00011e d0ed                      		rcall lcd_display_number
00011f e200
000120 d0b3
000121 d0a0                      		lcd_write_data ' '
000122 e70a
000123 d0b0
000124 d09d                      		lcd_write_data 'z'
000125 e30a
000126 d0ad
000127 d09a                      		lcd_write_data ':'
000128 2f03                      		mov temp, current_height
000129 950a                      		dec temp
00012a d0e1                      		rcall lcd_display_number
00012b e000
00012c 940e 02fa                 		fly_ctrl stop_motor_speed
00012e c000                      		rjmp end
                                 
                                 		
                                 
                                 end:
00012f cfff                      	rjmp end
                                 
                                 
                                 
                                 
                                 
                                 RESET:
000130 2700                      	clr temp
000131 2711                      	clr temp2
000132 2722                      	clr direction
000133 2733                      	clr current_height
000134 2744                      	clr current_x
000135 2755                      	clr current_y
000136 2777                      	clr r23
                                 	;clear all registers being used
                                 
                                 	;setup lcd
000137 ef0f                      	ser temp
000138 bb00                      	store lcd_data_ddr, temp
000139 b901                      	store lcd_ctrl_ddr, temp
00013a d0ab                      	rcall lcd_init
                                 
                                 	;setup led
00013b ef0f                      	ser temp	
00013c b907                      	store led_ddr, temp
                                 	
                                 	;setup keypad
00013d ef00                      	ldi temp, 0b11110000
00013e 9300 010a                 	store key_ddr, temp
000140 e00a                      	ldi temp, (1<<ISC01)|(1<<ISC11)
000141 9300 0069                 	sts EICRA, temp
000143 e001                      	ldi temp, (1<<INT0)
000144 bb0d                      	out EIMSK, temp
000145 ef0f                      	ser temp
000146 b90d                      	out DDRE, temp
000147 940e 02e7                 	call pwm_generate
000149 9478                      	sei
00014a cf35                      	rjmp main
                                 
                                 .include "keypad.asm"
                                 
                                  * KEYPAD.ASM
                                  *
                                  *  CREATED: 2017/10/3
                                  *  AUTHOR: SHAOHUI Z5155945
                                  */ 
                                 ;----------------------------------
                                 ;FUNCTIONS RELATED TO KEYPAD
                                 ;GET_KEY
                                 ;KEY_ASCII
                                 ;----------------------------------
                                 ;KEYPAD SHOULD BE CONNECTED AS BELOW
                                 ;KEYPAD -> PORTL
                                 ;COLUMS -> 4:7
                                 ;ROWS -> 0:3
                                 ;PORT DIRECTIONS SHOULD BE SET ON RESET
                                 ;----------------------------------
                                 .EQU ROWMASK = 0X0F
                                 .EQU COLMASK = 0B11101111	;START FROM C0
                                 
                                 ;FUNCTION TO GET KEYVALUE FROM KEYPAD, RETURN ROW:COL ON R24:R25
                                 GET_KEY:
00014b 930f                      	PUSH R16				;R16 AS RMASK
00014c 931f                      	PUSH R17				;R17 AS ROW
00014d 932f                      	PUSH R18				;R18 AS COL
00014e 933f                      	PUSH R19				;R19 AS TEMP1
00014f 934f                      	PUSH R20				;R20 AS TEMP2
000150 935f                      	PUSH R21				;R21 AS CMASK
                                 	SET_CMASK:
000151 ee5f                      		LDI R21, COLMASK
000152 9350 010b                 		STORE KEY_PORT, R21	;SET COLMASK TO 0X11101111
000154 2722                      		CLR R18				;SET COL TO 0
                                 	CLOOP:
000155 e001                      		LDI R16, 0X01		;START FROM ROW 0
000156 2711                      		CLR R17				;SET ROW TO 0
                                 	RLOOP:
000157 9130 0109                 		LOAD R19, PINL		;GET VALUE FROM KEYPAD
000159 2f43                      		MOV R20, R19
00015a 704f                      		ANDI R20, ROWMASK	;CLR COL INPUT
00015b 2340                      		AND R20, R16
00015c f409                      		BRNE NEXT_ROW
00015d c00d                      		RJMP DEBOUNCING_LOOP
                                 	NEXT_ROW:
00015e 0f00                      		LSL R16				;LEFTSHIFT RMASK
00015f 9513                      		INC R17				;ROW = ROW + 1
000160 3014                      		CPI R17, 4			;IF ROW == 4
000161 f009                      		BREQ NEXT_COL		;GOTO NEXT COL
000162 cff4                      		RJMP RLOOP			;ELSE GOTO NEXT ROW
                                 	NEXT_COL:
000163 0f55                      		LSL R21				;LEFTSHIFT CMASK
000164 9523                      		INC R18				;COL = COL + 1
000165 3024                      		CPI R18, 4			;IF COL == 4
000166 f351                      		BREQ SET_CMASK		;STARTOVER AGAIN
000167 9553                      		INC R21
000168 9350 010b                 		STORE KEY_PORT, R21		;SET CMASK
00016a cfea                      		RJMP CLOOP			;GOTO NEXT COL
                                 
                                 	DEBOUNCING_LOOP:		;SOLVE DEBOUNCING
00016b 9130 0109                 		LOAD R19, PINL
00016d 703f                      		ANDI R19, ROWMASK
00016e 303f                      		CPI R19, 0X0F
00016f f7d9                      		BRNE DEBOUNCING_LOOP
000170 2f81                      	MOV R24, R17			;R24 AS ROW
000171 2f92                      	MOV R25, R18			;R25 AS COL
                                 
000172 915f                      	POP R21
000173 914f                      	POP R20
000174 913f                      	POP R19
000175 912f                      	POP R18
000176 911f                      	POP R17
000177 910f                      	POP R16
000178 9508                      	RET
                                 
                                 ;GET KEY_ASCII VALUE FROM INPUT AS R24->ROW, R25->COL, RETURN ASCII VALUE AS R23
                                 KEY_ASCII:
000179 938f                      	PUSH R24				;R24 AS ROW
00017a 939f                      	PUSH R25				;R25 AS COL
00017b 930f                      	PUSH R16				;R16 AS TEMP
00017c 920f                      	PUSH R0
00017d 921f                      	PUSH R1					;MUL WILL BE USED
                                 
00017e dfcc                      	RCALL GET_KEY
00017f 3093                      	CPI R25, 3				;IF COL == 3
000180 f049                      	BREQ ASCII_LETTER
000181 3083                      	CPI R24, 3				;IF ROW == 3
000182 f059                      	BREQ ASCII_SYMBOL
000183 e003                      	LDI R16, 3				;TEMP = 3 * ROW + COL
000184 9f80                      	MUL R24, R16			;
000185 2d00                      	MOV R16, R0
000186 0f09                      	ADD R16, R25 
000187 5c0f                      	SUBI R16, -'1'			;GET ASCII VALUE
000188 2f70                      	MOV R23, R16
000189 c00e                      	RJMP RETURN_KEY_ASCII
                                 
                                 	ASCII_LETTER:
00018a e401                      		LDI R16, 'A'			;TEMP = 'A'
00018b 0f08                      		ADD R16, R24			;TEMP += ROW
00018c 2f70                      		MOV R23, R16
00018d c00a                      		RJMP RETURN_KEY_ASCII
                                 
                                 	ASCII_SYMBOL:
00018e 3090                      		CPI R25, 0				;'*'
00018f f021                      		BREQ ASCII_STAR
000190 3091                      		CPI R25, 1				;'0'
000191 f021                      		BREQ ASCII_ZERO
000192 e273                      		LDI R23, '#'			;'#'
000193 c004                      		RJMP RETURN_KEY_ASCII
                                 
                                 	ASCII_STAR:
000194 e27a                      		LDI R23, '*'
000195 c002                      		RJMP RETURN_KEY_ASCII
                                 
                                 	ASCII_ZERO:
000196 e370                      		LDI R23, '0'
000197 c000                      		RJMP RETURN_KEY_ASCII
                                 
                                 RETURN_KEY_ASCII:
000198 901f                      	POP R1
000199 900f                      	POP R0
00019a 910f                      	POP R16
00019b 919f                      	POP R25
00019c 918f                      	POP R24
00019d 9508                      	RET
                                 ;GET A 8BIT INT USING KEYPAD, END WITH '#'
                                 ;RETURN value -> r23 if not overflowed
                                 KEY_VALUE:
00019e 920f                      	PUSH R0
00019f 921f                      	PUSH R1
0001a0 930f                      	PUSH R16
0001a1 931f                      	PUSH R17
0001a2 932f                      	PUSH R18
                                 
0001a3 2711                      	CLR R17
                                 	
                                 	KEY_VALUE_LOOP:
0001a4 dfd4                      		RCALL KEY_ASCII				;GET A VALUE
0001a5 2f07
0001a6 d02d
0001a7 d01a                      		LCD_WRITE_DATA_reg R23		;DISPLAY EVERY KEY PRESSED
0001a8 3273                      		CPI R23, '#'
0001a9 f089                      		BREQ KEY_VALUE_RETURN
0001aa 5370                      		SUBI R23, '0'				;GET THE REAL VALUE
0001ab 3070                      		CPI R23, 0
0001ac f058                      		BRLO KEY_VALUE_OVERFLOW
0001ad 307a                      		CPI R23, 10
0001ae f448                      		BRSH KEY_VALUE_OVERFLOW		;MAKE SURE key value is between 0-9, if not -> overflow
                                 		;convert r17
0001af e02a                      		LDI R18, 10					
0001b0 9f12                      		MUL R17, R18
0001b1 e020                      		LDI R18, 0
0001b2 1521                      		CP R18, R1
0001b3 f421                      		BRNE KEY_VALUE_OVERFLOW		;IF R17 * 10 > 255 -> overflow
0001b4 2d10                      		MOV R17, R0					;R17 = R17 * 10
0001b5 0f17                      		ADD R17, R23
0001b6 f008                      		BRCS KEY_VALUE_OVERFLOW		;if r17 + r23 > 255 -> overflow
0001b7 cfec                      		RJMP KEY_VALUE_LOOP
                                 	KEY_VALUE_OVERFLOW:
0001b8 940e 02ff                 		CALL LEDFLASH				;WHEN overflow occurs, flash led
0001ba ef7f                      		LDI R23, -1
                                 KEY_VALUE_RETURN:
0001bb 2f71                      	MOV R23, R17
0001bc 912f                      	POP R18
0001bd 911f                      	POP R17
0001be 910f                      	POP R16
0001bf 900f                      	pop R0
0001c0 901f                      	pop r1
0001c1 9508                      	RET
                                 
                                 
                                 
                                 .include "lcd.asm"
                                 
                                  * lcd.asm
                                  *
                                  *  Created: 2017/10/3
                                  *  Author: shaohui z5155945
                                  */ 
                                 
                                 ;--------------------------------------
                                 ;FUNCTIONS RELATED TO THE LCD DISPLAY:
                                 ;LCD_WAIT
                                 ;DATA_WRITE
                                 ;COM_WRITE
                                 ;LCD_INIT
                                 ;LCD_DISPLAY_NUMBER:
                                 ;LCD_DISPLAY_NUMBER_16BIT:
                                 ;--------------------------------------
                                 ;LCD PORTS SHOULD BE CONNECTED AS BELOW
                                 ;LCD_CTRL -> LCD_CTRL_PORT
                                 ;LCD_DATA -> LCD_DATA_PORT
                                 ;WHITCH IS DEFINED IN CONSTANT.INC
                                 ;SPCIFICLY EACH BIT SHOULD BE
                                 .EQU LCD_RS = 7
                                 .EQU LCD_E = 6
                                 .EQU LCD_RW = 5
                                 ;--------------------------------------
                                 ;WAITING FUNCTIONS AND GENERAL FUNCTIONS ARE USED IN SOME OF LCD FUNCTIONS
                                 ;MACROS.ASM SHOULD ALSO BE INCLUDE IN THE MAIN.ASM FILE
                                 ;--------------------------------------
                                 
                                 ;WAIT UNTILL LCD IS NOT BUSY
                                 LCD_WAIT:
0001c2 930f                      	PUSH R16
0001c3 2700                      	CLR R16
0001c4 bb00                      	OUT DDRF, R16			;SET PORTF AS INPUT
0001c5 e200                      	LDI R16, 1<<LCD_RW
0001c6 b902                      	OUT LCD_CTRL_PORT, R16			;SET RS = 0 & RW = 1
                                 	BUSY_LOOP:
0001c7 d085                      		RCALL WAIT_1MS		;GET SOME DELAY
0001c8 9a16                      		SBI LCD_CTRL_PORT, LCD_E
0001c9 d083                      		RCALL WAIT_1MS		;GET SOME DELAY
0001ca e00f                      		LDI R16, PINF
0001cb 9816                      		CBI LCD_CTRL_PORT, LCD_E
0001cc fd07                      		SBRC R16, 7			;IF BF IS CLEAR, END BUSY LOOP
0001cd cff9                      		RJMP BUSY_LOOP		;ELSE LOOP UNTIL IT'S SET
0001ce 2700                      	CLR R16
0001cf b902                      	OUT LCD_CTRL_PORT, R16
0001d0 ef0f                      	SER R16
0001d1 bb00                      	OUT DDRF, R16
0001d2 910f                      	POP R16
0001d3 9508                      	RET
                                 
                                 ;FUNCTION TO WRITE DATA TO LCD, USING REGISTER R16(DATA)
                                 DATA_WRITE:
0001d4 bb01                      	OUT LCD_DATA_PORT, R16			;SEND DATA TO LCD_DATA
0001d5 9a17                      	SBI LCD_CTRL_PORT, LCD_RS		;SET LCD_RS = 1
0001d6 9815                      	CBI LCD_CTRL_PORT, LCD_RW		;SET LCD_RW = 0
0001d7 d075                      	RCALL WAIT_1MS
0001d8 9a16                      	SBI LCD_CTRL_PORT, LCD_E		;ENABLE
0001d9 d073                      	RCALL WAIT_1MS
0001da 9816                      	CBI LCD_CTRL_PORT, LCD_E
0001db d071                      	RCALL WAIT_1MS
0001dc 9508                      	RET		
                                 
                                 ;FUNCTION TO WRITE COM TO LCD, USING REGISTER R16(DATA)
                                 COM_WRITE:
0001dd bb01                      	OUT LCD_DATA_PORT, R16			;SEND DATA TO LCD_DATA
0001de 9817                      	CBI LCD_CTRL_PORT, LCD_RS		;SET LCD_RS = 0
0001df 9815                      	CBI LCD_CTRL_PORT, LCD_RW		;SET LCD_RW = 0
0001e0 d06c                      	RCALL WAIT_1MS
0001e1 9a16                      	SBI LCD_CTRL_PORT, LCD_E		;ENABLE
0001e2 d06a                      	RCALL WAIT_1MS
0001e3 9816                      	CBI LCD_CTRL_PORT, LCD_E
0001e4 d068                      	RCALL WAIT_1MS
0001e5 9508                      	RET
                                 
                                 ;INIT LCD USING SOME MACROS DEFINED IN MACROS.ASM
                                 LCD_INIT:
0001e6 930f                      	PUSH R16
0001e7 930f                      	PUSH TEMP
0001e8 e00f
0001e9 940e 0256                 	MACRO_WAIT 15				;WAIT 15MS
                                 	;INIT LCD
0001eb e308
0001ec dff0
0001ed dfd4                      	LCD_WRITE_COM 0B00111000
0001ee e005
0001ef 940e 0256                 	MACRO_WAIT 5
0001f1 e308
0001f2 dfea
0001f3 dfce                      	LCD_WRITE_COM 0B00111000
0001f4 e001
0001f5 940e 0256                 	MACRO_WAIT 1
0001f7 e308
0001f8 dfe4
0001f9 dfc8                      	LCD_WRITE_COM 0B00111000	;WRITE FUNCTION SET 3TIMES
0001fa e308
0001fb dfe1
0001fc dfc5                      	LCD_WRITE_COM 0B00111000	;2*5*7
                                 
0001fd e008
0001fe dfde
0001ff dfc2                      	LCD_WRITE_COM 0B00001000	;DISPLAY OFF
000200 e001
000201 dfdb
000202 dfbf                      	LCD_WRITE_COM 0B00000001	;DISPLAY CLR
000203 e006
000204 dfd8
000205 dfbc                      	LCD_WRITE_COM 0B00000110	;INCREMENT, NO SHIFT
000206 e00f
000207 dfd5
000208 dfb9                      	LCD_WRITE_COM 0B00001111	;CURSOR ON, BAR, BLINK
000209 910f                      	POP R16
00020a 910f                      	POP TEMP
00020b 9508                      	RET
                                 
                                 
                                 ;DISPLAY 8BIT NUMBER ON LCD, INPUT R16 AS NUMBER, R23 R24 R25 USING FOR TAKE THE ASCII VALUE OF THE NUMBER
                                 LCD_DISPLAY_NUMBER:
00020c 930f                      	PUSH R16
00020d 937f                      	PUSH R23
00020e 938f                      	PUSH R24
00020f 939f                      	PUSH R25
                                 
000210 940e 029c                 	CALL ITOA				;USING FUNCTION ITOA FROM GENERAL FUNCTIONS TO GET ASCII VALUE OF A CERTAIN INT
000212 2f07                      	MOV R16, R23			;DISPLAY ASCII SYMBLE ONE BY ONE
000213 dfae                      	RCALL LCD_WAIT
000214 dfbf                      	RCALL DATA_WRITE
000215 2f08                      	MOV R16, R24			;FROM HIGH TO LOW
000216 dfab                      	RCALL LCD_WAIT
000217 dfbc                      	RCALL DATA_WRITE
000218 2f09                      	MOV R16, R25
000219 dfa8                      	RCALL LCD_WAIT
00021a dfb9                      	RCALL DATA_WRITE
                                 
00021b 919f                      	POP R25
00021c 918f                      	POP R24
00021d 917f                      	POP R23
00021e 910f                      	POP R16
00021f 9508                      	RET
                                 
                                 ;16BIT NUMBER DISPLAY, SAME TECHNIQUE AS 8BIT VERSION
                                 LCD_DISPLAY_NUMBER_16BIT:
000220 930f                      	PUSH R16
000221 931f                      	PUSH R17
000222 935f                      	PUSH R21
000223 936f                      	PUSH R22
000224 937f                      	PUSH R23
000225 938f                      	PUSH R24
000226 939f                      	PUSH R25
                                 
000227 940e 02b4                 	CALL ITOA_16BIT
000229 2f05                      	MOV R16, R21
00022a df97                      	RCALL LCD_WAIT
00022b dfa8                      	RCALL DATA_WRITE
00022c 2f06                      	MOV R16, R22
00022d df94                      	RCALL LCD_WAIT
00022e dfa5                      	RCALL DATA_WRITE
00022f 2f07                      	MOV R16, R23
000230 df91                      	RCALL LCD_WAIT
000231 dfa2                      	RCALL DATA_WRITE
000232 2f08                      	MOV R16, R24
000233 df8e                      	RCALL LCD_WAIT
000234 df9f                      	RCALL DATA_WRITE
000235 2f09                      	MOV R16, R25
000236 df8b                      	RCALL LCD_WAIT
000237 df9c                      	RCALL DATA_WRITE
                                 
000238 919f                      	POP R25
000239 918f                      	POP R24
00023a 917f                      	POP R23
00023b 916f                      	POP R22
00023c 915f                      	POP R21
00023d 910f                      	POP R16
00023e 911f                      	POP R17
00023f 9508                      	RET
                                 
                                 ;display STRING, r16(low), r17(high) as string addr
                                 LCD_DISPLAY_STRING:
000240 93ef                      	push ZL
000241 93ff                      	push ZH
                                 
000242 2fe0                      	mov zl, R16
000243 2ff1                      	mov zh, R17
                                 	lcd_display_string_loop:
000244 df7d                      		rcall lcd_wait
000245 9105                      		lpm r16, Z+
000246 3000                      		cpi r16, 0
000247 f011                      		breq lcd_display_string_return
000248 df8b                      		rcall DATA_WRITE
000249 cffa                      		rjmp lcd_display_string_loop
                                 	
                                 	lcd_display_string_return:
00024a 91ff                      	pop zh
00024b 91ef                      	pop zl
00024c 9508                      	ret
                                 
                                 .include "wait.asm"
                                 
                                  * WAIT.ASM
                                  *
                                  *  CREATED: 2017/10/3
                                  *  AUTHOR: SHAOHUI Z5155945
                                  */ 
                                 ;----------------------------------
                                 ;SOME FUNCTIONS TO GENERATE DELAYS
                                 ;WAIT_1MS
                                 ;WAIT_MORE
                                 ;----------------------------------
                                 
                                 ;FUNCTION TO WAIT FOR 1MS
                                 WAIT_1MS:
00024d 938f                      	PUSH R24
00024e 939f                      	PUSH R25
                                 
00024f e084                      	LDI R24, LOW(4100)
000250 e190                      	LDI R25, HIGH(4100)		;A LITTLE MORE THAN 1MS
                                 	MS_LOOP:
000251 9701                      		SBIW R24, 1
000252 f7f1                      		BRNE MS_LOOP
                                 	
000253 919f                      	POP R25
000254 918f                      	POP R24
000255 9508                      	RET
                                 
                                 ;USING R16 AS INPUT FOR WAIT R16MS
                                 WAIT_MORE:
000256 930f                      	PUSH R16
                                 
                                 	WAIT_MORE_LOOP:
000257 dff5                      		RCALL WAIT_1MS		;EACH TIME WAIT FOR 1MS
000258 950a                      		DEC R16
000259 f7e9                      		BRNE WAIT_MORE_LOOP
                                 
00025a 910f                      	POP R16
00025b 9508                      	RET
                                 .include "drone.asm"
                                 
                                 ;R21-> ROW, R20-> COL, R18 -> DIRECTION
                                 ;Z POINT TO LAST POSITION
                                 ;NEW_HEIGHT -> R23 AS RETURN
                                 ;IF REACH END, RETURN -1(WHICH MIGHT NEVER HAPPEN)
                                 FLY_TO_NEXT_POS:    
00025c 3020                          CPI R18, 0      ;R18 -> SET AS FLY RIGHT, CLEAR AS FLY LEFT
00025d f071                          BREQ GO_LEFT
00025e 334f                          CPI R20, BORDER_X   ;CHECK IF REACHED BOARDER
00025f f0a1                          BREQ GO_DOWN        ;IF BOARDER REACHED, GO DOWN
000260 e502
000261 df72
000262 df5f                          LCD_WRITE_DATA 'R'
000263 9631                          ADIW Z, 1
000264 9543                          INC R20
                                 
                                     CHECK_HEIGHT:
000265 9174                              LPM R23, Z
000266 e200
000267 df6c
000268 df59                              LCD_WRITE_DATA ' '
000269 9508                              RET
                                 
                                     GO_END:
00026a ef7f                              LDI R23, -1
00026b 9508                              RET
                                 
                                     GO_LEFT:
00026c 3040                              CPI R20, 0
00026d f031                              BREQ GO_DOWN
00026e e40c
00026f df64
000270 df51                              LCD_WRITE_DATA 'L'
000271 9731                              SBIW Z, 1
000272 954a                              DEC R20
000273 cff1                              RJMP CHECK_HEIGHT
                                     
                                     GO_DOWN:
000274 335f                              CPI R21, BORDER_Y
000275 f3a1                              BREQ GO_END
000276 e404
000277 df5c
000278 df49                              LCD_WRITE_DATA 'D'
000279 96ff                              ADIW Z, BORDER_Y	    ;NEXT ROW
00027a 9520                              COM R18                 ;DIFFERENT DIRECTION
00027b 9553                              inc R21					;SET R21, NEXT ROW
00027c cfe8                              RJMP CHECK_HEIGHT
                                 
                                 ;CURRENT POSITION: R20:R21 -> X:Y
                                 ;RETURN R23 AS SIGNAL IF R23 SET, THEN THE ACCIDENT POSITION IS FOUND
                                 ;ELSE IF R23 IS CLR, ACCIDENT POSITION IS NOT FOUND
                                 DRONE_SEARCH:
00027d 930f                      	PUSH R16
00027e 931f                      	PUSH R17
00027f 93ef                      	PUSH ZL
000280 93ff                      	PUSH ZH
                                 
000281 2777                      	CLR R23
000282 e302
000283 940e 02fa                 	FLY_CTRL HALF_MOTOR_SPEED	;SET MOTOR SPEED TO HALF
000285 e0e0                      	LDI ZL, LOW(ACCIDENT)
000286 e0f2                      	LDI ZH, HIGH(ACCIDENT)
                                 
000287 9101                      	LD R16, Z+
000288 8110                      	LD R17, Z
                                 
000289 1704                      	CP R16, R20
00028a f419                      	BRNE SEARCH_RETURN
00028b 1715                      	CP R17, R21
00028c f409                      	BRNE SEARCH_RETURN
00028d ef7f                      	SER R23
                                 SEARCH_RETURN:
00028e 91ff                      	POP ZH
00028f 91ef                      	POP ZL
000290 910f                      	POP R16
000291 911f                      	POP R17
000292 9508                      	RET
                                 
                                 ;SET ACCIDENT POSITION IN DESG, ACCIDENT(X,Y)
                                 ;WITH REGISTER R2 AS X, R3 AS Y
                                 SET_LOCATION:
000293 93ef                          PUSH ZL
000294 93ff                          PUSH ZH
                                 
000295 e0e0                          LDI ZL, LOW(ACCIDENT)
000296 e0f2                          LDI ZH, HIGH(ACCIDENT)
000297 9221                          ST Z+, R2
000298 8230                          ST Z, R3
                                 
000299 91ff                          POP ZH
00029a 91ef                          POP ZL
                                 .include "generalfunc.asm"
00029b 9508                      
                                  * generalfunc.asm
                                  *
                                  *  Created: 2017/9/29 22:20:30
                                  *   Author: shaoh
                                  */ 
                                 ;---------------------------------------------
                                 ;SOME USEFUL FUNCTIONS:
                                 ;ITOA
                                 ;ITOA_16BIT
                                 ;PWM_GENERATE
                                 ;---------------------------------------------
                                 ITOA:	;8BIT INPUT(MAX 255, MIN 0) R16, R23:R24:R25 OUTPUT ASCII VALUE
00029c 930f                      	PUSH R16
00029d 2777                      	CLR R23
00029e 2788                      	CLR R24
00029f 2799                      	CLR R25
                                 
                                 	E100S:					;EXTRACT 100
0002a0 3604                      		CPI R16, 100
0002a1 f018                      		BRLO E10S
0002a2 5604                      		SUBI R16, 100
0002a3 9573                      		INC R23
0002a4 cffb                      		RJMP E100S
                                 
                                 	E10S:					;EXTRACT 10
0002a5 300a                      		CPI R16, 10
0002a6 f018                      		BRLO E1S
0002a7 500a                      		SUBI R16, 10
0002a8 9583                      		INC R24
0002a9 cffb                      		RJMP E10S
                                 
                                 	E1S:					;EXTRACT 1
0002aa 3001                      		CPI R16, 1
0002ab f018                      		BRLO ITOA_RETURN
0002ac 5001                      		SUBI R16, 1
0002ad 9593                      		INC R25
0002ae cffb                      		RJMP E1S
                                 
                                 	ITOA_RETURN:
0002af 5d70                      		SUBI R23, -'0'		;GET ASCII VALUE FOR EACH
0002b0 5d80                      		SUBI R24, -'0'
0002b1 5d90                      		SUBI R25, -'0'
0002b2 910f                      		POP R16
0002b3 9508                      		RET
                                 
                                 ITOA_16BIT:	;16BIT INPUT(MAX 65535, MIN 0) R17_HIGH:R16_LOW, R21:R22:R23:R24:R25 OUTPUT ASCII VALUE
0002b4 930f                      	PUSH R16			;LOW
0002b5 931f                      	PUSH R17			;HIGH
0002b6 932f                      	PUSH R18			;TEMP REGISTER
0002b7 2755                      	CLR R21				;10000S
0002b8 2766                      	CLR R22				;1000S
0002b9 2777                      	CLR R23				;100S
0002ba 2788                      	CLR R24				;10S
0002bb 2799                      	CLR R25				;1S
                                 
                                 	XE10000S:					;EXTRACT 10000
0002bc e227                      		LDI R18, HIGH(10000)
0002bd 3100                      		CPI R16, LOW(10000)
0002be 0712                      		CPC R17, R18
0002bf f020                      		BRLO XE1000S
0002c0 5100                      		SUBI R16, LOW(10000)
0002c1 0b12                      		SBC R17, R18
0002c2 9553                      		INC R21
0002c3 cff8                      		RJMP XE10000S
                                 
                                 	XE1000S:					;EXTRACT 1000
0002c4 e023                      		LDI R18, HIGH(1000)		;USE R18 TO CMP
0002c5 3e08                      		CPI R16, LOW(1000)		;CMP LOW FIRST
0002c6 0712                      		CPC R17, R18			;THEN HIGH
0002c7 f020                      		BRLO XE100S
0002c8 5e08                      		SUBI R16, LOW(1000)		;SUB LOW FIRST
0002c9 0b12                      		SBC R17, R18			;THEN HIGH
0002ca 9563                      		INC R22
0002cb cff8                      		RJMP XE1000S
                                 
                                 	XE100S:					;EXTRACT 100
0002cc e020                      		LDI R18, HIGH(100)
0002cd 3604                      		CPI R16, LOW(100)
0002ce 0712                      		CPC R17, R18
0002cf f020                      		BRLO XE10S
0002d0 5604                      		SUBI R16, LOW(100)
0002d1 0b12                      		SBC R17, R18
0002d2 9573                      		INC R23
0002d3 cff8                      		RJMP XE100S
                                 
                                 	XE10S:					;EXTRACT 10
0002d4 300a                      		CPI R16, 10
0002d5 f018                      		BRLO XE1S
0002d6 500a                      		SUBI R16, 10
0002d7 9583                      		INC R24
0002d8 cffb                      		RJMP XE10S
                                 
                                 	XE1S:					;EXTRACT 1
0002d9 3001                      		CPI R16, 1
0002da f018                      		BRLO ITOA_16BIT_RETURN
0002db 5001                      		SUBI R16, 1
0002dc 9593                      		INC R25
0002dd cffb                      		RJMP XE1S
                                 
                                 	ITOA_16BIT_RETURN:
0002de 5d50                      		SUBI R21, -'0'		;GET ASCII VALUE FOR EACH
0002df 5d60                      		SUBI R22, -'0'
0002e0 5d70                      		SUBI R23, -'0'
0002e1 5d80                      		SUBI R24, -'0'
0002e2 5d90                      		SUBI R25, -'0'
                                 
0002e3 912f                      		POP R18
0002e4 911f                      		POP R17
0002e5 910f                      		POP R16
0002e6 9508                      		RET
                                 
                                 ;USING TIMER3 AND OCR3B TO GENERATE PWM
                                 
                                 PWM_GENERATE:
0002e7 930f                      	PUSH r16
                                 	
0002e8 ef0f                      	ser TEMP
0002e9 b90d                      	STORE DDRE, r16					;SET UP PORTE BIT4 AS PWM OUTPUT
0002ea 2700                      	clr TEMP
0002eb 9300 009d                 	STORE OCR3CH, r16
0002ed 2700                      	clr temp
0002ee 9300 009c                 	STORE OCR3CL, r16					;ONLY OCR3BL MATTERS(8BIT PWM)
0002f0 e009                      	LDI TEMP, (1<<WGM30)|(1<<COM3C1)	;8BIT PHASE CORRECT PWM MODE
0002f1 9300 0090                 	STORE TCCR3A, r16		
0002f3 e001                      	LDI TEMP, 1<<CS30					
0002f4 9300 0091                 	STORE TCCR3B, r16
0002f6 ef0f                      	ser temp
0002f7 b908                      	out portc, temp
                                 	
0002f8 910f                      	POP r16
0002f9 9508                      	ret
                                 
                                 ;Change pwm duty
                                 .set PWM_CMP_REG = OCR3CL		;use OCR3BL as pwm compare regis
                                 pwm_duty:
0002fa 930f                      	push r16
                                 
0002fb 9300 009c                 	STORE PWM_CMP_REG, r16
                                 
0002fd 910f                      	pop r16
0002fe 9508                      	ret
                                 
                                 LEDFLASH:
0002ff 930f                      	push r16
                                 
000300 ef0f                      	ser r16
000301 b908                      	out portc, r16
000302 e302
000303 940e 0256                 	macro_wait 50
000305 2700                      	clr r16
000306 b908                      	out portc, r16
000307 e302
000308 940e 0256                 	macro_wait 50
00030a ef0f                      	ser r16
00030b b908                      	out portc, r16
00030c e302
00030d 940e 0256                 	macro_wait 50
00030f 2700                      	clr r16
000310 b908                      	out portc, r16
000311 e302
000312 940e 0256                 	macro_wait 50
000314 ef0f                      	ser r16
000315 b908                      	out portc, r16
000316 e302
000317 940e 0256                 	macro_wait 50
000319 2700                      	clr r16
00031a b908                      	out portc, r16
00031b e302
00031c 940e 0256                 	macro_wait 50
                                 
00031e 910f                      	pop r16
00031f 9508                      	ret
                                 .include "mountain.asm"
                                 
000320 0000
000321 0000
000322 0000
000323 0000
000324 0000
000325 0000
000326 0a00
000327 150f
000328 1612
000329 1f1c
00032a 2121
00032b 2b28
00032c 2b28
00032d 292b
00032e 262a
00032f 2120
000330 1b1d
000331 1618
000332 151a
000333 1c1a
000334 1d1e
000335 221c
000336 2320
000337 1e23
000338 151b
000339 1310
00033a 1115
00033b 0a11
00033c 0d0f
00033d 0000
00033e 0000
00033f 0000                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,10,15,21,18,22,28,31,33,33,40,43,40,43,43,41,42,38,32,33,29,27,24,22,26,21,26,28,30,29,28,34,32,35,35,30,27,21,16,19,21,17,17,10,15,13,0,0,0,0,0,0
000340 0000
000341 0000
000342 0000
000343 0000
000344 0000
000345 0000
000346 0e0a
000347 1612
000348 1b16
000349 2120
00034a 2623
00034b 2b2b
00034c 2e2b
00034d 2d30
00034e 292c
00034f 2125
000350 1d1f
000351 1b1b
000352 161a
000353 1d1a
000354 2120
000355 241f
000356 2824
000357 2228
000358 171b
000359 1814
00035a 1415
00035b 0f11
00035c 0d0f
00035d 0008
00035e 0000
00035f 0000                      .db 0,0,0,0,0,0,0,0,0,0,0,0,10,14,18,22,22,27,32,33,35,38,43,43,43,46,48,45,44,41,37,33,31,29,27,27,26,22,26,29,32,33,31,36,36,40,40,34,27,23,20,24,21,20,17,15,15,13,8,0,0,0,0,0
000360 0000
000361 0000
000362 0000
000363 0000
000364 0000
000365 0000
000366 0b0a
000367 160e
000368 1817
000369 221f
00036a 2123
00036b 2a26
00036c 2e28
00036d 2c2f
00036e 2829
00036f 2126
000370 191a
000371 1517
000372 1e18
000373 201f
000374 2422
000375 2421
000376 2824
000377 2227
000378 1a1d
000379 1919
00037a 1919
00037b 0717
00037c 0d08
00037d 000a
00037e 0000
00037f 0000                      .db 0,0,0,0,0,0,0,0,0,0,0,0,10,11,14,22,23,24,31,34,35,33,38,42,40,46,47,44,41,40,38,33,26,25,23,21,24,30,31,32,34,36,33,36,36,40,39,34,29,26,25,25,25,25,23,7,8,13,10,0,0,0,0,0
000380 0000
000381 0000
000382 0000
000383 0000
000384 0000
000385 0000
000386 0900
000387 110e
000388 1712
000389 1d1a
00038a 1d1b
00038b 2822
00038c 2c2b
00038d 262b
00038e 2627
00038f 1c26
000390 1519
000391 1517
000392 1b1a
000393 2524
000394 2926
000395 2428
000396 2b28
000397 2527
000398 2424
000399 1e21
00039a 1a1e
00039b 0c16
00039c 090b
00039d 0000
00039e 0000
00039f 0000                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,9,14,17,18,23,26,29,27,29,34,40,43,44,43,38,39,38,38,28,25,21,23,21,26,27,36,37,38,41,40,36,40,43,39,37,36,36,33,30,30,26,22,12,11,9,0,0,0,0,0,0
0003a0 0000
0003a1 0000
0003a2 0000
0003a3 0000
0003a4 0000
0003a5 0000
0003a6 0000
0003a7 0c08
0003a8 1510
0003a9 1918
0003aa 1817
0003ab 231f
0003ac 2925
0003ad 2929
0003ae 2828
0003af 1723
0003b0 1b19
0003b1 1a15
0003b2 1e1d
0003b3 241f
0003b4 2a2a
0003b5 2c2c
0003b6 302f
0003b7 282b
0003b8 2428
0003b9 2123
0003ba 1c1e
0003bb 0e13
0003bc 0b0b
0003bd 0908
0003be 0900
0003bf 0a00                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,12,16,21,24,25,23,24,31,35,37,41,41,41,40,40,35,23,25,27,21,26,29,30,31,36,42,42,44,44,47,48,43,40,40,36,35,33,30,28,19,14,11,11,8,9,0,9,0,10
0003c0 0000
0003c1 0000
0003c2 0000
0003c3 0000
0003c4 0000
0003c5 0000
0003c6 0900
0003c7 0909
0003c8 0e0b
0003c9 1913
0003ca 1313
0003cb 1f1b
0003cc 2929
0003cd 2924
0003ce 2425
0003cf 1720
0003d0 1d19
0003d1 2520
0003d2 1f1c
0003d3 2424
0003d4 2c25
0003d5 2d28
0003d6 352f
0003d7 2f33
0003d8 2a2f
0003d9 2226
0003da 2020
0003db 1317
0003dc 101b
0003dd 0c0d
0003de 0d07
0003df 0f0a                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,11,14,19,25,19,19,27,31,41,41,36,41,37,36,32,23,25,29,32,37,28,31,36,36,37,44,40,45,47,53,51,47,47,42,38,34,32,32,23,19,27,16,13,12,7,13,10,15
0003e0 0000
0003e1 0000
0003e2 0000
0003e3 0000
0003e4 0000
0003e5 0000
0003e6 0d0a
0003e7 0e0d
0003e8 0b06
0003e9 1512
0003ea 1010
0003eb 2120
0003ec 2823
0003ed 1d22
0003ee 1c21
0003ef 1720
0003f0 1f1b
0003f1 2625
0003f2 272c
0003f3 2522
0003f4 2f29
0003f5 2f2a
0003f6 3833
0003f7 3437
0003f8 2b33
0003f9 2726
0003fa 2523
0003fb 1b1c
0003fc 111b
0003fd 080c
0003fe 0e0b
0003ff 110a                      .db 0,0,0,0,0,0,0,0,0,0,0,0,10,13,13,14,6,11,18,21,16,16,32,33,35,40,34,29,33,28,32,23,27,31,37,38,44,39,34,37,41,47,42,47,51,56,55,52,51,43,38,39,35,37,28,27,27,17,12,8,11,14,10,17
000400 0000
000401 0000
000402 0000
000403 0000
000404 0000
000405 0900
000406 0d0d
000407 1210
000408 1312
000409 1616
00040a 1916
00040b 211e
00040c 2322
00040d 1b1f
00040e 191e
00040f 1b19
000410 221f
000411 2724
000412 272c
000413 2c2a
000414 2f2e
000415 2f2f
000416 392f
000417 3737
000418 2f34
000419 2728
00041a 2526
00041b 2020
00041c 1620
00041d 1414
00041e 1010
00041f 110e                      .db 0,0,0,0,0,0,0,0,0,0,0,9,13,13,16,18,18,19,22,22,22,25,30,33,34,35,31,27,30,25,25,27,31,34,36,39,44,39,42,44,46,47,47,47,47,57,55,55,52,47,40,39,38,37,32,32,32,22,20,20,16,16,14,17
000420 0000
000421 0000
000422 0000
000423 0000
000424 0000
000425 0000
000426 0d08
000427 100b
000428 1011
000429 1115
00042a 1411
00042b 1c1c
00042c 201f
00042d 181c
00042e 1a19
00042f 1e1d
000430 2421
000431 2929
000432 2c2d
000433 2f2e
000434 3433
000435 3434
000436 3b34
000437 3a3b
000438 3038
000439 2b2b
00043a 292b
00043b 2425
00043c 1925
00043d 1717
00043e 1415
00043f 1415                      .db 0,0,0,0,0,0,0,0,0,0,0,0,8,13,11,16,17,16,21,17,17,20,28,28,31,32,28,24,25,26,29,30,33,36,41,41,45,44,46,47,51,52,52,52,52,59,59,58,56,48,43,43,43,41,37,36,37,25,23,23,21,20,21,20
000440 0000
000441 0000
000442 0000
000443 0000
000444 0000
000445 0000
000446 0a00
000447 1007
000448 0e0d
000449 0b13
00044a 130e
00044b 1a18
00044c 171a
00044d 191c
00044e 1c18
00044f 201f
000450 2520
000451 2d27
000452 312f
000453 2f2e
000454 3834
000455 3535
000456 3b39
000457 3838
000458 3035
000459 2f2c
00045a 2c2f
00045b 272a
00045c 1e25
00045d 181e
00045e 1618
00045f 1216                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,10,7,16,13,14,19,11,14,19,24,26,26,23,28,25,24,28,31,32,32,37,39,45,47,49,46,47,52,56,53,53,57,59,56,56,53,48,44,47,47,44,42,39,37,30,30,24,24,22,22,18
000460 0000
000461 0000
000462 0000
000463 0000
000464 0000
000465 0000
000466 0000
000467 0600
000468 090b
000469 0b09
00046a 1111
00046b 1514
00046c 1c1a
00046d 181c
00046e 1d1d
00046f 2521
000470 2323
000471 2e28
000472 322f
000473 2f2f
000474 3b34
000475 3639
000476 3d38
000477 393e
000478 3539
000479 3330
00047a 2f33
00047b 232d
00047c 2321
00047d 1c21
00047e 1d18
00047f 181d                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,11,9,9,11,17,17,20,21,26,28,28,24,29,29,33,37,35,35,40,46,47,50,47,47,52,59,57,54,56,61,62,57,57,53,48,51,51,47,45,35,33,35,33,28,24,29,29,24
000480 0000
000481 0000
000482 0000
000483 0000
000484 0000
000485 0000
000486 0000
000487 0000
000488 0706
000489 0d0b
00048a 1312
00048b 1514
00048c 1919
00048d 1b1b
00048e 1d1c
00048f 2521
000490 2525
000491 2b29
000492 3430
000493 3434
000494 3b38
000495 3739
000496 403b
000497 3e40
000498 3a3e
000499 3338
00049a 2d31
00049b 2629
00049c 2323
00049d 1e21
00049e 1e1e
00049f 1c1d                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,11,13,18,19,20,21,25,25,27,27,28,29,33,37,37,37,41,43,48,52,52,52,56,59,57,55,59,64,64,62,62,58,56,51,49,45,41,38,35,35,33,30,30,30,29,28
0004a0 0000
0004a1 0000
0004a2 0000
0004a3 0000
0004a4 0000
0004a5 0000
0004a6 0000
0004a7 0000
0004a8 0000
0004a9 0a06
0004aa 1310
0004ab 1214
0004ac 1815
0004ad 1618
0004ae 1c19
0004af 201c
0004b0 2827
0004b1 2a28
0004b2 302e
0004b3 3333
0004b4 3635
0004b5 3636
0004b6 3b36
0004b7 3e3f
0004b8 3739
0004b9 3636
0004ba 2f31
0004bb 232d
0004bc 2121
0004bd 2021
0004be 1b1f
0004bf 1317                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,10,16,19,20,18,21,24,24,22,25,28,28,32,39,40,40,42,46,48,51,51,53,54,54,54,54,59,63,62,57,55,54,54,49,47,45,35,33,33,33,32,31,27,23,19
0004c0 0000
0004c1 0000
0004c2 0000
0004c3 0000
0004c4 0000
0004c5 0000
0004c6 0000
0004c7 0000
0004c8 0900
0004c9 0e0b
0004ca 1010
0004cb 1311
0004cc 1715
0004cd 1516
0004ce 1c19
0004cf 201c
0004d0 2625
0004d1 2a28
0004d2 302d
0004d3 2f33
0004d4 342f
0004d5 2f35
0004d6 3833
0004d7 3c3b
0004d8 3234
0004d9 3633
0004da 2a35
0004db 1e27
0004dc 1b1c
0004dd 1c17
0004de 191b
0004df 1113                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,14,16,16,17,19,21,23,22,21,25,28,28,32,37,38,40,42,45,48,51,47,47,52,53,47,51,56,59,60,52,50,51,54,53,42,39,30,28,27,23,28,27,25,19,17
0004e0 0000
0004e1 0000
0004e2 0000
0004e3 0000
0004e4 0000
0004e5 0000
0004e6 0000
0004e7 0000
0004e8 0000
0004e9 0e09
0004ea 0f0e
0004eb 0d0f
0004ec 1711
0004ed 1914
0004ee 1c1c
0004ef 1d18
0004f0 2222
0004f1 2627
0004f2 2f2b
0004f3 2b2a
0004f4 332a
0004f5 2e2e
0004f6 352e
0004f7 3539
0004f8 2d33
0004f9 3633
0004fa 2f34
0004fb 1926
0004fc 1b19
0004fd 1317
0004fe 0e0f
0004ff 0f0e                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,14,14,15,15,13,17,23,20,25,28,28,24,29,34,34,39,38,43,47,42,43,42,51,46,46,46,53,57,53,51,45,51,54,52,47,38,25,25,27,23,19,15,14,14,15
000500 0000
000501 0000
000502 0000
000503 0000
000504 0000
000505 0000
000506 0000
000507 0000
000508 0000
000509 0c09
00050a 0c0c
00050b 0c0e
00050c 1011
00050d 1814
00050e 1512
00050f 1918
000510 201f
000511 2423
000512 2e27
000513 2829
000514 332e
000515 3032
000516 332c
000517 3339
000518 2d2f
000519 292d
00051a 2c2f
00051b 1727
00051c 1417
00051d 130f
00051e 0d0d
00051f 0d09                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,12,12,12,14,12,17,16,20,24,18,21,24,25,31,32,35,36,39,46,41,40,46,51,50,48,44,51,57,51,47,45,45,41,47,44,39,23,23,20,15,19,13,13,9,13
000520 0000
000521 0000
000522 0000
000523 0000
000524 0000
000525 0000
000526 0000
000527 0000
000528 0000
000529 0a06
00052a 100f
00052b 1010
00052c 1310
00052d 1013
00052e 1211
00052f 1613
000530 1d19
000531 2120
000532 2525
000533 2425
000534 312c
000535 2f32
000536 2e2c
000537 3039
000538 2d2c
000539 2629
00053a 2a2a
00053b 2627
00053c 0f17
00053d 0f0d
00053e 0809
00053f 0800                      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,10,15,16,16,16,16,19,19,16,17,18,19,22,25,29,32,33,37,37,37,36,44,49,50,47,44,46,57,48,44,45,41,38,42,42,39,38,23,15,13,15,9,8,0,8
000540 0000
000541 0000
000542 0000
000543 0000
000544 0600
000545 0000
000546 0000
000547 0000
000548 0700
000549 110b
00054a 1411
00054b 0f14
00054c 150d
00054d 0d15
00054e 1310
00054f 1513
000550 1c17
000551 1f1c
000552 2024
000553 2625
000554 2c28
000555 2f2e
000556 292a
000557 3036
000558 2a30
000559 2525
00055a 2424
00055b 2524
00055c 1617
00055d 0f15
00055e 080c
00055f 0000                      .db 0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,11,17,17,20,20,15,13,21,21,13,16,19,19,21,23,28,28,31,36,32,37,38,40,44,46,47,42,41,54,48,48,42,37,37,36,36,36,37,23,22,21,15,12,8,0,0
000560 0000
000561 0000
000562 0000
000563 0000
000564 0b07
000565 0008
000566 0000
000567 0000
000568 0800
000569 0c0c
00056a 1211
00056b 0f14
00056c 1508
00056d 1011
00056e 1414
00056f 0f0f
000570 1817
000571 1f1d
000572 2321
000573 2325
000574 2824
000575 2a26
000576 2527
000577 2e31
000578 272c
000579 2121
00057a 1d20
00057b 1f21
00057c 1517
00057d 1212
00057e 0009
00057f 0000                      .db 0,0,0,0,0,0,0,0,7,11,8,0,0,0,0,0,0,8,12,12,17,18,20,15,8,21,17,16,20,20,15,15,23,24,29,31,33,35,37,35,36,40,38,42,39,37,49,46,44,39,33,33,32,29,33,31,23,21,18,18,9,0,0,0
000580 0000
000581 0000
000582 0000
000583 0800
000584 0e0c
000585 060b
000586 0000
000587 0000
000588 0a00
000589 0e0e
00058a 1514
00058b 1116
00058c 190d
00058d 1518
00058e 0d14
00058f 0c10
000590 1c1b
000591 1e1c
000592 1b1d
000593 2420
000594 2726
000595 2323
000596 211f
000597 2b21
000598 2a2a
000599 282a
00059a 1a1f
00059b 1c17
00059c 1116
00059d 0c0d
00059e 0008
00059f 0000                      .db 0,0,0,0,0,0,0,8,12,14,11,6,0,0,0,0,0,10,14,14,20,21,22,17,13,25,24,21,20,13,16,12,27,28,28,30,29,27,32,36,38,39,35,35,31,33,33,43,42,42,42,40,31,26,23,28,22,17,13,12,8,0,0,0
0005a0 0000
0005a1 0000
0005a2 0000
0005a3 0000
0005a4 1007
0005a5 060b
0005a6 0000
0005a7 090a
0005a8 0c0a
0005a9 110c
0005aa 1a15
0005ab 161b
0005ac 1919
0005ad 1518
0005ae 1212
0005af 1413
0005b0 1817
0005b1 1c17
0005b2 1614
0005b3 221b
0005b4 2422
0005b5 2020
0005b6 1c1e
0005b7 191b
0005b8 1619
0005b9 262a
0005ba 1a1c
0005bb 1417
0005bc 0e0f
0005bd 0a09
0005be 0000
0005bf 0000                      .db 0,0,0,0,0,0,0,0,7,16,11,6,0,0,10,9,10,12,12,17,21,26,27,22,25,25,24,21,18,18,19,20,23,24,23,28,20,22,27,34,34,36,32,32,30,28,27,25,25,22,42,38,28,26,23,20,15,14,9,10,0,0,0,0
0005c0 0000
0005c1 0000
0005c2 0000
0005c3 0a00
0005c4 100c
0005c5 090c
0005c6 0a00
0005c7 0c0b
0005c8 110e
0005c9 1612
0005ca 1b1b
0005cb 1b1e
0005cc 1919
0005cd 1818
0005ce 1315
0005cf 1214
0005d0 1517
0005d1 1113
0005d2 1312
0005d3 1f1a
0005d4 221f
0005d5 1f20
0005d6 1c1f
0005d7 191a
0005d8 1416
0005d9 2618
0005da 1322
0005db 1113
0005dc 0c0c
0005dd 000a
0005de 0000
0005df 0000                      .db 0,0,0,0,0,0,0,10,12,16,12,9,0,10,11,12,14,17,18,22,27,27,30,27,25,25,24,24,21,19,20,18,23,21,19,17,18,19,26,31,31,34,32,31,31,28,26,25,22,20,24,38,34,19,19,17,12,12,10,0,0,0,0,0
0005e0 0000
0005e1 0000
0005e2 0000
0005e3 0d0a
0005e4 120e
0005e5 0c0d
0005e6 0a09
0005e7 0d0d
0005e8 1110
0005e9 1714
0005ea 1d1a
0005eb 1b1e
0005ec 151a
0005ed 0f13
0005ee 0d10
0005ef 1112
0005f0 0b16
0005f1 0e0e
0005f2 100e
0005f3 1c18
0005f4 2222
0005f5 2122
0005f6 171c
0005f7 1417
0005f8 1415
0005f9 1914
0005fa 1320
0005fb 1010
0005fc 080b
0005fd 0000
0005fe 0000
0005ff 0000                      .db 0,0,0,0,0,0,10,13,14,18,13,12,9,10,13,13,16,17,20,23,26,29,30,27,26,21,19,15,16,13,18,17,22,11,14,14,14,16,24,28,34,34,34,33,28,23,23,20,21,20,20,25,32,19,16,16,11,8,0,0,0,0,0,0
000600 0000
000601 0000
000602 0a00
000603 0f0b
000604 120f
000605 0b0d
000606 0b0a
000607 0b0d
000608 1212
000609 1816
00060a 221d
00060b 2222
00060c 1a1a
00060d 1216
00060e 1011
00060f 150f
000610 0a15
000611 0a0b
000612 110d
000613 1814
000614 201b
000615 1d1b
000616 1717
000617 1417
000618 1312
000619 1614
00061a 0c15
00061b 0c0f
00061c 000a
00061d 0000
00061e 0000
00061f 0000                      .db 0,0,0,0,0,10,11,15,15,18,13,11,10,11,13,11,18,18,22,24,29,34,34,34,26,26,22,18,17,16,15,21,21,10,11,10,13,17,20,24,27,32,27,29,23,23,23,20,18,19,20,22,21,12,15,12,10,0,0,0,0,0,0,0
000620 0000
000621 0700
000622 0c09
000623 0e0d
000624 1712
000625 1112
000626 0f0a
000627 0d10
000628 1714
000629 1a17
00062a 2320
00062b 1e23
00062c 191d
00062d 0c0b
00062e 0d0e
00062f 130d
000630 0b10
000631 0a06
000632 0d0d
000633 1615
000634 1d1b
000635 1d1c
000636 1317
000637 1417
000638 0c14
000639 1411
00063a 0d11
00063b 080d
00063c 0000
00063d 0000
00063e 0000
00063f 0000                      .db 0,0,0,7,9,12,13,14,18,23,18,17,10,15,16,13,20,23,23,26,32,35,35,30,29,25,11,12,14,13,13,19,16,11,6,10,13,13,21,22,27,29,28,29,23,19,23,20,20,12,17,20,17,13,13,8,0,0,0,0,0,0,0,0
000640 0000
000641 0b08
000642 0e0d
000643 140e
000644 1a15
000645 1517
000646 150d
000647 1015
000648 110d
000649 1c17
00064a 201c
00064b 2223
00064c 0d1d
00064d 090d
00064e 0d0e
00064f 0b0c
000650 0b0c
000651 0b0b
000652 0f0b
000653 1414
000654 191a
000655 1a1b
000656 1919
000657 1417
000658 0c0f
000659 100c
00065a 0d0d
00065b 0c0c
00065c 000a
00065d 0000
00065e 0000
00065f 0000                      .db 0,0,8,11,13,14,14,20,21,26,23,21,13,21,21,16,13,17,23,28,28,32,35,34,29,13,13,9,14,13,12,11,12,11,11,11,11,15,20,20,26,25,27,26,25,25,23,20,15,12,12,16,13,13,12,12,10,0,0,0,0,0,0,0
000660 0000
000661 0800
000662 1310
000663 1613
000664 1b16
000665 1612
000666 1311
000667 1415
000668 1114
000669 1919
00066a 231d
00066b 2224
00066c 0f1d
00066d 0912
00066e 0c0b
00066f 0b0c
000670 080c
000671 090a
000672 0b07
000673 1814
000674 1919
000675 1216
000676 1819
000677 0e14
000678 080a
000679 0b0c
00067a 070c
00067b 080c
00067c 0000
00067d 0000
00067e 0000
00067f 0000                      .db 0,0,0,8,16,19,19,22,22,27,18,22,17,19,21,20,20,17,25,25,29,35,36,34,29,15,18,9,11,12,12,11,12,8,10,9,7,11,20,24,25,25,22,18,25,24,20,14,10,8,12,11,12,7,12,8,0,0,0,0,0,0,0,0
000680 0000
000681 0c08
000682 1515
000683 1617
000684 1d1e
000685 1816
000686 1214
000687 1315
000688 1514
000689 2115
00068a 2422
00068b 2625
00068c 1421
00068d 0d13
00068e 0c0d
00068f 1207
000690 0c0c
000691 100d
000692 1613
000693 1716
000694 1518
000695 1213
000696 1517
000697 1314
000698 0f10
000699 0809
00069a 0007
00069b 0008
00069c 0000
00069d 0000
00069e 0000
00069f 0000                      .db 0,0,8,12,21,21,23,22,30,29,22,24,20,18,21,19,20,21,21,33,34,36,37,38,33,20,19,13,13,12,7,18,12,12,13,16,19,22,22,23,24,21,19,18,23,21,20,19,16,15,9,8,7,0,8,0,0,0,0,0,0,0,0,0
0006a0 0800
0006a1 0d0c
0006a2 1716
0006a3 1b17
0006a4 1f1e
0006a5 181b
0006a6 1213
0006a7 1517
0006a8 1919
0006a9 1c19
0006aa 2422
0006ab 2727
0006ac 1827
0006ad 1015
0006ae 0a0e
0006af 1416
0006b0 0d11
0006b1 0b0d
0006b2 1411
0006b3 1614
0006b4 1514
0006b5 1514
0006b6 1415
0006b7 0f13
0006b8 0c0b
0006b9 0009
0006ba 0000
0006bb 0000
0006bc 0000
0006bd 0000
0006be 0000
0006bf 0000                      .db 0,8,12,13,22,23,23,27,30,31,27,24,19,18,23,21,25,25,25,28,34,36,39,39,39,24,21,16,14,10,22,20,17,13,13,11,17,20,20,22,20,21,20,21,21,20,19,15,11,12,9,0,0,0,0,0,0,0,0,0,0,0,0,0
0006c0 0d0d
0006c1 1012
0006c2 1515
0006c3 1e1e
0006c4 2222
0006c5 1d22
0006c6 1b1c
0006c7 1a18
0006c8 181a
0006c9 1f1a
0006ca 2422
0006cb 2927
0006cc 1c26
0006cd 181b
0006ce 1818
0006cf 1b1b
0006d0 1819
0006d1 0f0b
0006d2 110f
0006d3 100f
0006d4 1413
0006d5 1611
0006d6 1415
0006d7 1113
0006d8 0c0f
0006d9 0009
0006da 0000
0006db 0000
0006dc 0000
0006dd 0000
0006de 0000
0006df 0000                      .db 13,13,18,16,21,21,30,30,34,34,34,29,28,27,24,26,26,24,26,31,34,36,39,41,38,28,27,24,24,24,27,27,25,24,11,15,15,17,15,16,19,20,17,22,21,20,19,17,15,12,9,0,0,0,0,0,0,0,0,0,0,0,0,0
0006e0 0e09
0006e1 1313
0006e2 1a16
0006e3 231e
0006e4 2225
0006e5 201f
0006e6 1b1f
0006e7 1c1d
0006e8 171a
0006e9 241c
0006ea 2622
0006eb 2a2b
0006ec 1c23
0006ed 1c1f
0006ee 1b17
0006ef 1b1b
0006f0 191a
0006f1 0f0e
0006f2 0c0c
0006f3 0b0e
0006f4 1010
0006f5 1511
0006f6 0d11
0006f7 1111
0006f8 070c
0006f9 0000
0006fa 0000
0006fb 0000
0006fc 0000
0006fd 0000
0006fe 0000
0006ff 0000                      .db 9,14,19,19,22,26,30,35,37,34,31,32,31,27,29,28,26,23,28,36,34,38,43,42,35,28,31,28,23,27,27,27,26,25,14,15,12,12,14,11,16,16,17,21,17,13,17,17,12,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000700 1311
000701 1b18
000702 1c17
000703 2621
000704 2726
000705 2123
000706 1d24
000707 1c1f
000708 1d1a
000709 241f
00070a 2d27
00070b 292e
00070c 2024
00070d 1e1f
00070e 1c22
00070f 1a19
000710 1216
000711 1411
000712 080c
000713 0e0b
000714 0b10
000715 1313
000716 0b12
000717 0d0c
000718 090c
000719 000a
00071a 0000
00071b 0000
00071c 0000
00071d 0000
00071e 0000
00071f 0000                      .db 17,19,24,27,23,28,33,38,38,39,35,33,36,29,31,28,26,29,31,36,39,45,46,41,36,32,31,30,34,28,25,26,22,18,17,20,12,8,11,14,16,11,19,19,18,11,12,13,12,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0
000720 1712
000721 1e19
000722 221e
000723 2725
000724 2a2d
000725 2527
000726 2124
000727 1c20
000728 1f1b
000729 241f
00072a 2c29
00072b 2e2f
00072c 2729
00072d 2224
00072e 1f22
00072f 1c1c
000730 1518
000731 1414
000732 0c0f
000733 0c0b
000734 0f0b
000735 1110
000736 0e10
000737 0b0d
000738 0c0c
000739 090c
00073a 0000
00073b 0000
00073c 0000
00073d 0000
00073e 0000
00073f 0000                      .db 18,23,25,30,30,34,37,39,45,42,39,37,36,33,32,28,27,31,31,36,41,44,47,46,41,39,36,34,34,31,28,28,24,21,20,20,15,12,11,12,11,15,16,17,16,14,13,11,12,12,12,9,0,0,0,0,0,0,0,0,0,0,0,0
000740 1a19
000741 201e
000742 2122
000743 2824
000744 2e2d
000745 252a
000746 2324
000747 1e1e
000748 181b
000749 2a1c
00074a 2c2c
00074b 2b2e
00074c 2828
00074d 1d26
00074e 171a
00074f 1918
000750 1517
000751 0f11
000752 0d0e
000753 0c0b
000754 0e0d
000755 100b
000756 0d0e
000757 0609
000758 0b08
000759 0007
00075a 0000
00075b 0000
00075c 0000
00075d 0000
00075e 0000
00075f 0000                      .db 25,26,30,32,34,33,36,40,45,46,42,37,36,35,30,30,27,24,28,42,44,44,46,43,40,40,38,29,26,23,24,25,23,21,17,15,14,13,11,12,13,14,11,16,14,13,9,6,8,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0
000760 201f
000761 1f24
000762 2723
000763 2926
000764 302e
000765 2a2e
000766 2328
000767 2122
000768 1a1c
000769 2219
00076a 2b27
00076b 292e
00076c 2327
00076d 1d23
00076e 1819
00076f 1518
000770 1012
000771 0a0e
000772 090d
000773 0806
000774 0b0d
000775 0f0e
000776 0a0a
000777 0b0e
000778 0907
000779 0000
00077a 0000
00077b 0000
00077c 0000
00077d 0000
00077e 0000
00077f 0000                      .db 31,32,36,31,35,39,38,41,46,48,46,42,40,35,34,33,28,26,25,34,39,43,46,41,39,35,35,29,25,24,24,21,18,16,14,10,13,9,6,8,13,11,14,15,10,10,14,11,7,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000780 2220
000781 2726
000782 2727
000783 2d2b
000784 332e
000785 2d2f
000786 272a
000787 2224
000788 1b1f
000789 1f16
00078a 2827
00078b 2b2c
00078c 202b
00078d 1a1b
00078e 1519
00078f 1517
000790 0d10
000791 070a
000792 0009
000793 0000
000794 0609
000795 0f0b
000796 0e0f
000797 0c0e
000798 080c
000799 0000
00079a 0000
00079b 0000
00079c 0000
00079d 0000
00079e 0000
00079f 0000                      .db 32,34,38,39,39,39,43,45,46,51,47,45,42,39,36,34,31,27,22,31,39,40,44,43,43,32,27,26,25,21,23,21,16,13,10,7,9,0,0,0,9,6,11,15,15,14,14,12,12,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0007a0 1b18
0007a1 221f
0007a2 2622
0007a3 2a28
0007a4 302b
0007a5 292c
0007a6 2326
0007a7 1d22
0007a8 1b1f
0007a9 1f1d
0007aa 231f
0007ab 2b28
0007ac 2929
0007ad 1718
0007ae 1116
0007af 1410
0007b0 1414
0007b1 0c11
0007b2 080c
0007b3 0000
0007b4 0000
0007b5 0c08
0007b6 0a0b
0007b7 0a0d
0007b8 0008
0007b9 0000
0007ba 0000
0007bb 0000
0007bc 0000
0007bd 0000
0007be 0000
0007bf 0000                      .db 24,27,31,34,34,38,40,42,43,48,44,41,38,35,34,29,31,27,29,31,31,35,40,43,41,41,24,23,22,17,16,20,20,20,17,12,12,8,0,0,0,0,8,12,11,10,13,10,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0007c0 1916
0007c1 211b
0007c2 2421
0007c3 2728
0007c4 3030
0007c5 2429
0007c6 2123
0007c7 1c21
0007c8 161c
0007c9 191b
0007ca 1f1a
0007cb 2727
0007cc 2023
0007cd 1716
0007ce 0d17
0007cf 1109
0007d0 1011
0007d1 0811
0007d2 000a
0007d3 0000
0007d4 0000
0007d5 0a00
0007d6 0a06
0007d7 0b0b
0007d8 0008
0007d9 0000
0007da 0000
0007db 0000
0007dc 0000
0007dd 0000
0007de 0000
0007df 0000                      .db 22,25,27,33,33,36,40,39,48,48,41,36,35,33,33,28,28,22,27,25,26,31,39,39,35,32,22,23,23,13,9,17,17,16,17,8,10,0,0,0,0,0,0,10,6,10,11,11,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0007e0 1414
0007e1 1c19
0007e2 221e
0007e3 2a24
0007e4 2f2a
0007e5 1f24
0007e6 1d1e
0007e7 1f21
0007e8 1b1e
0007e9 1a1b
0007ea 1d19
0007eb 2223
0007ec 1f1f
0007ed 1114
0007ee 0c0d
0007ef 1107
0007f0 0e11
0007f1 0d0f
0007f2 0009
0007f3 0000
0007f4 0000
0007f5 0000
0007f6 0000
0007f7 0b0a
0007f8 0008
0007f9 0000
0007fa 0000
0007fb 0000
0007fc 0000
0007fd 0000
0007fe 0000
0007ff 0000                      .db 20,20,25,28,30,34,36,42,42,47,36,31,30,29,33,31,30,27,27,26,25,29,35,34,31,31,20,17,13,12,7,17,17,14,15,13,9,0,0,0,0,0,0,0,0,0,10,11,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000800 1412
000801 2117
000802 2121
000803 2823
000804 2a2a
000805 1b1f
000806 1418
000807 1e11
000808 191e
000809 1519
00080a 1c17
00080b 2120
00080c 1f1a
00080d 0f1e
00080e 0a0d
00080f 1111
000810 0c0f
000811 0a08
000812 0000
000813 0000
000814 0000
000815 0000
000816 0000
000817 0a00
000818 0000
000819 0000
00081a 0000
00081b 0000
00081c 0000
00081d 0000
00081e 0000
00081f 0000                      .db 18,20,23,33,33,33,35,40,42,42,31,27,24,20,17,30,30,25,25,21,23,28,32,33,26,31,30,15,13,10,17,17,15,12,8,10,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000820 1615
000821 1d19
000822 1e1e
000823 2621
000824 272a
000825 1722
000826 1417
000827 1213
000828 171b
000829 1616
00082a 1916
00082b 161b
00082c 1d12
00082d 0f1e
00082e 090d
00082f 0d0d
000830 0d0d
000831 080b
000832 0000
000833 0000
000834 0000
000835 0000
000836 0000
000837 0000
000838 0000
000839 0000
00083a 0000
00083b 0000
00083c 0000
00083d 0000
00083e 0000
00083f 0000                      .db 21,22,25,29,30,30,33,38,42,39,34,23,23,20,19,18,27,23,22,22,22,25,27,22,18,29,30,15,13,9,13,13,13,13,11,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000840 1110
000841 1b15
000842 1e1a
000843 291e
000844 2229
000845 1422
000846 1414
000847 1110
000848 1216
000849 1616
00084a 1911
00084b 1519
00084c 0e11
00084d 0d1c
00084e 0a0c
00084f 0c0d
000850 090b
000851 0007
000852 0000
000853 0000
000854 0000
000855 0000
000856 0000
000857 0000
000858 0000
000859 0000
00085a 0000
00085b 0000
00085c 0000
00085d 0000
00085e 0000
00085f 0000                      .db 16,17,21,27,26,30,30,41,41,34,34,20,20,20,16,17,22,18,22,22,17,25,25,21,17,14,28,13,12,10,13,12,11,9,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000860 0d0a
000861 1914
000862 1c17
000863 241d
000864 1d24
000865 1819
000866 1311
000867 0f0f
000868 0d0d
000869 0c11
00086a 1210
00086b 1316
00086c 0c0f
00086d 080c
00086e 0909
00086f 090c
000870 080b
000871 0000
000872 0000
000873 0000
000874 0000
000875 0000
000876 0000
000877 0000
000878 0000
000879 0000
00087a 0000
00087b 0000
00087c 0000
00087d 0000
00087e 0000
00087f 0000                      .db 10,13,20,25,23,28,29,36,36,29,25,24,17,19,15,15,13,13,17,12,16,18,22,19,15,12,12,8,9,9,12,9,11,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000880 110f
000881 1816
000882 1919
000883 1c1c
000884 1a1f
000885 1718
000886 0d10
000887 0a0c
000888 0c0b
000889 0b0c
00088a 110d
00088b 0d12
00088c 0a08
00088d 0008
00088e 0000
00088f 0008
000890 0008
000891 0000
000892 0000
000893 0000
000894 0000
000895 0000
000896 0000
000897 0000
000898 0000
000899 0000
00089a 0000
00089b 0000
00089c 0000
00089d 0000
00089e 0000
00089f 0000                      .db 15,17,22,24,25,25,28,28,31,26,24,23,16,13,12,10,11,12,12,11,13,17,18,13,8,10,8,0,0,0,8,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0008a0 0c07
0008a1 1512
0008a2 1919
0008a3 171c
0008a4 1a18
0008a5 1415
0008a6 0910
0008a7 0007
0008a8 0c09
0008a9 060d
0008aa 110b
0008ab 0b0d
0008ac 0007
0008ad 0000
0008ae 0000
0008af 0000
0008b0 0000
0008b1 0000
0008b2 0000
0008b3 0000
0008b4 0000
0008b5 0000
0008b6 0000
0008b7 0000
0008b8 0000
0008b9 0000
0008ba 0000
0008bb 0000
0008bc 0000
0008bd 0000
0008be 0000
0008bf 0000                      .db 7,12,18,21,25,25,28,23,24,26,21,20,16,9,7,0,9,12,13,6,11,17,13,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0008c0 0d0c
0008c1 150e
0008c2 1419
0008c3 141c
0008c4 1a15
0008c5 1017
0008c6 0b0e
0008c7 0009
0008c8 0a00
0008c9 0d0d
0008ca 0e0e
0008cb 0809
0008cc 0000
0008cd 0000
0008ce 0000
0008cf 0000
0008d0 0000
0008d1 0000
0008d2 0000
0008d3 0000
0008d4 0000
0008d5 0000
0008d6 0000
0008d7 0000
0008d8 0000
0008d9 0000
0008da 0000
0008db 0000
0008dc 0000
0008dd 0000
0008de 0000
0008df 0000                      .db 12,13,14,21,25,20,28,20,21,26,23,16,14,11,9,0,0,10,13,13,14,14,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0008e0 0c08
0008e1 1716
0008e2 1a18
0008e3 141c
0008e4 1510
0008e5 1213
0008e6 090d
0008e7 0000
0008e8 0000
0008e9 0809
0008ea 0b0a
0008eb 0007
0008ec 0000
0008ed 0000
0008ee 0000
0008ef 0000
0008f0 0000
0008f1 0000
0008f2 0000
0008f3 0000
0008f4 0000
0008f5 0000
0008f6 0000
0008f7 0000
0008f8 0000
0008f9 0000
0008fa 0000
0008fb 0000
0008fc 0000
0008fd 0000
0008fe 0000
0008ff 0000                      .db 8,12,22,23,24,26,28,20,16,21,19,18,13,9,0,0,0,0,9,8,10,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000900 0d0b
000901 1310
000902 120e
000903 0d17
000904 1212
000905 1011
000906 0b0c
000907 000a
000908 0000
000909 0b08
00090a 070c
00090b 0000
00090c 0000
00090d 0000
00090e 0000
00090f 0000
000910 0000
000911 0000
000912 0000
000913 0000
000914 0000
000915 0000
000916 0000
000917 0000
000918 0000
000919 0000
00091a 0000
00091b 0000
00091c 0000
00091d 0000
00091e 0000
00091f 0000                      .db 11,13,16,19,14,18,23,13,18,18,17,16,12,11,10,0,0,0,8,11,12,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000920 0a00
000921 100d
000922 0f0c
000923 0b0a
000924 0f0d
000925 0b0a
000926 090b
000927 0000
000928 0900
000929 0f0a
00092a 070c
00092b 0000
00092c 0000
00092d 0000
00092e 0000
00092f 0000
000930 0000
000931 0000
000932 0000
000933 0000
000934 0000
000935 0000
000936 0000
000937 0000
000938 0000
000939 0000
00093a 0000
00093b 0000
00093c 0000
00093d 0000
00093e 0000
00093f 0000                      .db 0,10,13,16,12,15,10,11,13,15,10,11,11,9,0,0,0,9,10,15,12,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000940 0000
000941 0f08
000942 0b07
000943 0a06
000944 0d08
000945 070b
000946 0b0b
000947 0a0a
000948 0b0a
000949 0f0f
00094a 080a
00094b 0000
00094c 0000
00094d 0000
00094e 0000
00094f 0000
000950 0000
000951 0000
000952 0000
000953 0000
000954 0000
000955 0000
000956 0000
000957 0000
000958 0000
000959 0000
00095a 0000
00095b 0000
00095c 0000
00095d 0000
00095e 0000
00095f 0000                      .db 0,0,8,15,7,11,6,10,8,13,11,7,11,11,10,10,10,11,15,15,10,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000960 0000
000961 0d0a
000962 0b09
000963 0006
000964 0a00
000965 0a0b
000966 0e0b
000967 0d0e
000968 0c0a
000969 1311
00096a 0c12
00096b 0909
00096c 0000
00096d 0000
00096e 0000
00096f 0000
000970 0000
000971 0000
000972 0000
000973 0000
000974 0000
000975 0000
000976 0000
000977 0000
000978 0000
000979 0000
00097a 0000
00097b 0000
00097c 0000
00097d 0000
00097e 0000
00097f 0000                      .db 0,0,10,13,9,11,6,0,0,10,11,10,11,14,14,13,10,12,17,19,18,12,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000980 0000
000981 0b0a
000982 0608
000983 0000
000984 0000
000985 0008
000986 0609
000987 100f
000988 1010
000989 1514
00098a 0f12
00098b 0b0d
00098c 0009
00098d 0008
00098e 0000
00098f 0000
000990 0000
000991 0000
000992 0000
000993 0000
000994 0000
000995 0000
000996 0000
000997 0000
000998 0000
000999 0000
00099a 0000
00099b 0000
00099c 0000
00099d 0000
00099e 0000
00099f 0000                      .db 0,0,10,11,8,6,0,0,0,0,8,0,9,6,15,16,16,16,20,21,18,15,13,11,9,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009a0 0000
0009a1 0a00
0009a2 0000
0009a3 0000
0009a4 0000
0009a5 0000
0009a6 0b08
0009a7 110f
0009a8 1513
0009a9 1817
0009aa 1114
0009ab 1114
0009ac 070c
0009ad 080b
0009ae 0000
0009af 0006
0009b0 0000
0009b1 0000
0009b2 0000
0009b3 0000
0009b4 0000
0009b5 0000
0009b6 0000
0009b7 0000
0009b8 0000
0009b9 0000
0009ba 0000
0009bb 0000
0009bc 0000
0009bd 0000
0009be 0000
0009bf 0000                      .db 0,0,0,10,0,0,0,0,0,0,0,0,8,11,15,17,19,21,23,24,20,17,20,17,12,7,11,8,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009c0 0000
0009c1 0000
0009c2 0000
0009c3 0000
0009c4 0000
0009c5 0a00
0009c6 0d0c
0009c7 110f
0009c8 1615
0009c9 1819
0009ca 1616
0009cb 1519
0009cc 0e10
0009cd 090b
0009ce 0a00
0009cf 080b
0009d0 0000
0009d1 0000
0009d2 0000
0009d3 0000
0009d4 0000
0009d5 0000
0009d6 0000
0009d7 0000
0009d8 0000
0009d9 0000
0009da 0000
0009db 0000
0009dc 0000
0009dd 0000
0009de 0000
0009df 0000                      .db 0,0,0,0,0,0,0,0,0,0,0,10,12,13,15,17,21,22,25,24,22,22,25,21,16,14,11,9,0,10,11,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009e0 0000
0009e1 0000
0009e2 0000
0009e3 0600
0009e4 0a00
0009e5 0a00
0009e6 0f0d
0009e7 1310
0009e8 1916
0009e9 1c1a
0009ea 1317
0009eb 161a
0009ec 1112
0009ed 0e11
0009ee 0f0a
0009ef 080b
0009f0 0006
0009f1 0000
0009f2 0000
0009f3 0000
0009f4 0000
0009f5 0000
0009f6 0000
0009f7 0000
0009f8 0000
0009f9 0000
0009fa 0000
0009fb 0000
0009fc 0000
0009fd 0000
0009fe 0000
0009ff 0000                      .db 0,0,0,0,0,0,0,6,0,10,0,10,13,15,16,19,22,25,26,28,23,19,26,22,18,17,17,14,10,15,11,8,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000a00 0000
000a01 0000
000a02 0000
000a03 0b08
000a04 0b06
000a05 0d09
000a06 130f
000a07 1614
000a08 1c18
000a09 211e
000a0a 1d20
000a0b 1b1b
000a0c 0817
000a0d 130f
000a0e 0f11
000a0f 0e0e
000a10 060b
000a11 0000
000a12 0000
000a13 0000
000a14 0000
000a15 0000
000a16 0000
000a17 0000
000a18 0000
000a19 0000
000a1a 0000
000a1b 0000
000a1c 0000
000a1d 0000
000a1e 0000
000a1f 0000                      .db 0,0,0,0,0,0,8,11,6,11,9,13,15,19,20,22,24,28,30,33,32,29,27,27,23,8,15,19,17,15,14,14,11,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000a20 0000
000a21 0000
000a22 0000
000a23 0c07
000a24 0d09
000a25 1211
000a26 1313
000a27 2727
000a28 2b2a
000a29 2221
000a2a 2025
000a2b 181c
000a2c 0c11
000a2d 1508
000a2e 1214
000a2f 1111
000a30 090b
000a31 0000
000a32 0000
000a33 0000
000a34 0000
000a35 0000
000a36 0000
000a37 0000
000a38 0000
000a39 0000
000a3a 0000
000a3b 0000
000a3c 0000
000a3d 0000
000a3e 0000
000a3f 0000                      .db 0,0,0,0,0,0,7,12,9,13,17,18,19,19,39,39,42,43,33,34,37,32,28,24,17,12,8,21,20,18,17,17,11,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000a40 0000
000a41 0000
000a42 0900
000a43 0f0d
000a44 100f
000a45 1112
000a46 1515
000a47 2715
000a48 2b29
000a49 2520
000a4a 2829
000a4b 171c
000a4c 1b12
000a4d 1918
000a4e 1318
000a4f 0f11
000a50 060b
000a51 0000
000a52 0000
000a53 0000
000a54 0000
000a55 0000
000a56 0000
000a57 0000
000a58 0000
000a59 0000
000a5a 0000
000a5b 0000
000a5c 0000
000a5d 0000
000a5e 0000
000a5f 0000                      .db 0,0,0,0,0,9,13,15,15,16,18,17,21,21,21,39,41,43,32,37,41,40,28,23,18,27,24,25,24,19,17,15,11,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000a60 0000
000a61 0000
000a62 0000
000a63 0b0a
000a64 1110
000a65 0d17
000a66 1511
000a67 1c1a
000a68 2c24
000a69 2a2c
000a6a 2429
000a6b 1c21
000a6c 1d19
000a6d 1a1a
000a6e 1417
000a6f 1011
000a70 0a10
000a71 0009
000a72 0000
000a73 0000
000a74 0000
000a75 0000
000a76 0000
000a77 0000
000a78 0000
000a79 0000
000a7a 0000
000a7b 0000
000a7c 0000
000a7d 0000
000a7e 0000
000a7f 0000                      .db 0,0,0,0,0,0,10,11,16,17,23,13,17,21,26,28,36,44,44,42,41,36,33,28,25,29,26,26,23,20,17,16,16,10,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000a80 0900
000a81 0709
000a82 070a
000a83 100d
000a84 1514
000a85 1e1a
000a86 1f1c
000a87 211e
000a88 2d27
000a89 2c2c
000a8a 292c
000a8b 1f28
000a8c 1f1c
000a8d 191a
000a8e 1519
000a8f 1212
000a90 0f0c
000a91 070e
000a92 0000
000a93 0000
000a94 0000
000a95 0000
000a96 0000
000a97 0000
000a98 0000
000a99 0000
000a9a 0000
000a9b 0000
000a9c 0000
000a9d 0000
000a9e 0000
000a9f 0000                      .db 0,9,9,7,10,7,13,16,20,21,26,30,28,31,30,33,39,45,44,44,44,41,40,31,28,31,26,25,25,21,18,18,12,15,14,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000aa0 0c09
000aa1 0c0c
000aa2 0c0c
000aa3 1210
000aa4 1615
000aa5 201d
000aa6 241f
000aa7 2522
000aa8 2e2a
000aa9 3031
000aaa 252c
000aab 2123
000aac 2124
000aad 181d
000aae 1617
000aaf 1212
000ab0 1111
000ab1 0c0c
000ab2 0008
000ab3 0000
000ab4 0000
000ab5 0000
000ab6 0000
000ab7 0000
000ab8 0000
000ab9 0000
000aba 0000
000abb 0000
000abc 0000
000abd 0000
000abe 0000
000abf 0000                      .db 9,12,12,12,12,12,16,18,21,22,29,32,31,36,34,37,42,46,49,48,44,37,35,33,36,33,29,24,23,22,18,18,17,17,12,12,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000ac0 0b0b
000ac1 0a07
000ac2 080a
000ac3 0e0a
000ac4 1712
000ac5 201c
000ac6 2624
000ac7 2a28
000ac8 2d2c
000ac9 3131
000aca 282c
000acb 2525
000acc 2324
000acd 1e22
000ace 191a
000acf 1517
000ad0 1414
000ad1 0e0f
000ad2 090c
000ad3 0000
000ad4 0000
000ad5 0000
000ad6 0000
000ad7 0000
000ad8 0000
000ad9 0000
000ada 0000
000adb 0000
000adc 0000
000add 0000
000ade 0000
000adf 0000                      .db 11,11,7,10,10,8,10,14,18,23,28,32,36,38,40,42,44,45,49,49,44,40,37,37,36,35,34,30,26,25,23,21,20,20,15,14,12,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000ae0 0700
000ae1 0000
000ae2 0700
000ae3 0f0c
000ae4 1511
000ae5 1b1a
000ae6 2625
000ae7 2722
000ae8 2d2a
000ae9 2c30
000aea 2428
000aeb 2124
000aec 1e22
000aed 1a1d
000aee 1417
000aef 1316
000af0 1213
000af1 0a0e
000af2 0008
000af3 0000
000af4 0000
000af5 0000
000af6 0000
000af7 0000
000af8 0000
000af9 0000
000afa 0000
000afb 0000
000afc 0000
000afd 0000
000afe 0000
000aff 0000                      .db 0,7,0,0,0,7,12,15,17,21,26,27,37,38,34,39,42,45,48,44,40,36,36,33,34,30,29,26,23,20,22,19,19,18,14,10,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000b00 0000
000b01 0000
000b02 0000
000b03 0c0a
000b04 130d
000b05 1816
000b06 1f1d
000b07 2622
000b08 2723
000b09 2a28
000b0a 2127
000b0b 1f1e
000b0c 181c
000b0d 1a1a
000b0e 1415
000b0f 1314
000b10 1213
000b11 0f10
000b12 080c
000b13 0000
000b14 0000
000b15 0000
000b16 0000
000b17 0000
000b18 0000
000b19 0000
000b1a 0000
000b1b 0000
000b1c 0000
000b1d 0000
000b1e 0000
000b1f 0000                      .db 0,0,0,0,0,0,10,12,13,19,22,24,29,31,34,38,35,39,40,42,39,33,30,31,28,24,26,26,21,20,20,19,19,18,16,15,12,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                                 
000b20 4e49
000b21 5550
000b22 2054
000b23 3a58
000b24 0000                      input_x:	.db "INPUT X:",0, 0
000b25 4e49
000b26 5550
000b27 2054
000b28 3a59
000b29 0000                      input_y: .db "INPUT Y:", 0, 0
000b2a 4553
000b2b 5241
000b2c 4843
000b2d 4e49
000b2e 0047                      string_search: .db "SEARCHING", 0
000b2f 4f46
000b30 4e55
000b31 2044
000b32 0020                      string_found: .db "FOUND  ", 0
000b33 4f4e
000b34 2054
000b35 4f46
000b36 4e55
000b37 0044                      string_not_found: .db "NOT FOUND", 0
000b38 4241
000b39 524f
000b3a 0054                      string_abort: .db "ABORT", 0
000b3b 4552
000b3c 4441
000b3d 0059                      ready_to_search: .db "READY", 0
                                 
                                 .dseg


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :   0 z  :  10 r0 :   6 r1 :   5 r2 :   2 r3 :   2 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 192 r17:  36 r18:  27 r19:  13 r20:  14 
r21:  20 r22:   6 r23:  42 r24:  22 r25:  22 r26:   0 r27:   0 r28:   0 
r29:   0 r30:  10 r31:  10 
Registers used: 17 out of 35 (48.6%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   3 adiw  :   2 and   :   1 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   1 break :   0 breq  :  17 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 brlt  :   0 brmi  :   0 
brne  :   7 brpl  :   0 brsh  :   3 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  23 cbi   :   6 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  26 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   4 cpc   :   3 
cpi   :  30 cpse  :   0 dec   :   3 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :  13 jmp   :   2 ld    :   2 ldd   :   0 ldi   :  99 
lds   :   2 lpm   :   3 lsl   :   2 lsr   :   0 mov   :  28 movw  :   0 
mul   :   2 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  20 pop   :  48 push  :  48 rcall : 126 ret   :  21 
reti  :   0 rjmp  :  30 rol   :   0 ror   :   0 sbc   :   3 sbci  :   0 
sbi   :   4 sbic  :   0 sbis  :   0 sbiw  :   3 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :  11 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   2 std   :   0 sts   :   9 sub   :   0 subi  :  19 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 41 out of 116 (35.3%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00167c   1354   4156   5510  262144   2.1%
[.dseg] 0x000200 0x000202      0      2      2    8192   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
