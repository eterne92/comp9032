;Z POINTING TO THE LAST POSITION, R18 DIRECTION
;R20-> ROW, R21-> COL, R18 -> DIRECTION
;Z POINT TO LAST POSITION
;NEW_HEIGHT -> R23 AS RETURN
;IF REACH END, RETURN -1(WHICH MIGHT NEVER HAPPEN)
FLY_TO_NEXT_POS:    
    CPI R18, 0      ;R18 -> SET AS FLY RIGHT, CLEAR AS FLY LEFT
    BREQ GO_LEFT
    CPI R21, BORDER_X   ;CHECK IF REACHED BOARDER
    BREQ GO_DOWN        ;IF BOARDER REACHED, GO DOWN
    LCD_WRITE_DATA 'R'
    ADIW Z, 1
    SUBI R21, -1

    CHECK_HEIGHT:
        LPM R23, Z
        LCD_WRITE_DATA ' '
        RET

    GO_END:
        LDI R23, -1
        RET

    GO_LEFT:
        CPI R21, 0
        BREQ GO_DOWN
        LCD_WRITE_DATA 'L'
        SBIW Z, 1
        SUBI R21, 1
        RJMP CHECK_HEIGHT
    
    GO_DOWN:
        CPI R20, BORDER_X
        BREQ GO_END
        LCD_WRITE_DATA 'D'
        ADIW Z, BORDER_Y	    ;NEXT ROW
        COM R18                 ;DIFFERENT DIRECTION
        SUBI R20, -1            ;SET R20, NEXT ROW
        RJMP CHECK_HEIGHT

;CURRENT POSITION: R20:R21 -> X:Y
;RETURN R23 AS SIGNAL IF R23 SET, THEN THE ACCIDENT POSITION IS FOUND
;ELSE IF R23 IS CLR, ACCIDENT POSITION IS NOT FOUND
DRONE_SEARCH:
	PUSH R16
	PUSH R17
	PUSH ZL
	PUSH ZH

	CLR R23
	FLY_CTRL HALF_MOTOR_SPEED	;SET MOTOR SPEED TO HALF
	LDI ZL, LOW(ACCIDENT)
	LDI ZH, HIGH(ACCIDENT)

	LPM R16, Z+
	LPM R17, Z

	CP R16, R20
	BRNE SEARCH_RETURN
	CP R17, R21
	BRNE SEARCH_RETURN
	SER R23
SEARCH_RETURN:
	POP ZH
	POP ZL
	POP R16
	POP R17
	RET

;SET ACCIDENT POSITION IN DESG, ACCIDENT(X,Y)
;WITH REGISTER R16 AS X, R17 AS Y
SET_LOCATION:
    PUSH ZL
    PUSH ZH

    LDI ZL, LOW(ACCIDENT)
    LDI ZH, HIGH(ACCIDENT)
    STS Z+, R16
    STS Z, R17

    POP ZH
    POP ZL
    RET