;
; motor.asm
;
; Created: 2017/9/30 9:19:13
; Author : shaoh
;

.INCLUDE "M2560DEF.INC"
.INCLUDE "CONSTANT.INC"
.DEF TEMP = R16
.DEF TEMP2 = R17
.DEF DIRECTION = R18
.DEF CURRENT_HEIGHT = R19
.DEF CURRENT_X = R20
.DEF CURRENT_Y = R21
.DEF FIND_X = R10 
.DEF FIND_Y = R11
.DEF FIND_Z = R12
.INCLUDE "MACROS.ASM"

.ORG 0	;SET INTERRUPT VERTEX
	RJMP RESET
.ORG INT0ADDR
	JMP SEARCH_START	;INT0 TO START SEARCH
.ORG INT1ADDR
	JMP SEARCH_ABORT	;INT1 TO ABORT SEARCH
.ORG 0X80
MAIN:
	INPUT_X_LOOP:		;INPUT A X, UNTIL IT IS VALID NUMBER
		LCD_CLEAR
		LDI TEMP, LOW(INPUT_X<<1)
		LDI TEMP2, HIGH(INPUT_X<<1)
		RCALL LCD_DISPLAY_STRING
		CALL KEY_VALUE
		CPI R23, -1
		BREQ INPUT_X_LOOP
		CPI R23, 65
		BRSH INPUT_X_LOOP
		MOV R2, R23

	INPUT_Y_LOOP:		;INPUT A Y, UNTIL IT IS VALID NUMBER
		LCD_CLEAR
		LDI TEMP, LOW(INPUT_Y<<1)
		LDI TEMP2, HIGH(INPUT_Y<<1)
		RCALL LCD_DISPLAY_STRING
		CALL KEY_VALUE
		CPI R23, -1
		BREQ INPUT_Y_LOOP
		CPI R23, 65
		BRSH INPUT_Y_LOOP
		MOV R3, R23

	LCD_CLEAR
	LDI TEMP, LOW(READY_TO_SEARCH<<1)
	LDI TEMP2, HIGH(READY_TO_SEARCH<<1)
	RCALL LCD_DISPLAY_STRING	;DISPLAY READY
	CALL SET_LOCATION			;SET UP ACCIDENT LOCATION
	LDI TEMP, 1<<INT0			;ONLY USE INT0 BEFORE SEARCH START
	STORE EIMSK, TEMP				;
	;NOW YOU CAN USE INT TO START SEARCH
	SYSTEM_HALT_LOOP:
		RJMP SYSTEM_HALT_LOOP
	
SEARCH_START:
	SEI
	CALL LEDFLASH				;
	LDI TEMP, 1<<INT1			;
	STORE EIMSK, TEMP			;DISABLE THE EX_INT0 SO SEARCH WON'T START AGAIN
	LDI CURRENT_X, -1			;SET START POSITION
	LDI CURRENT_Y, 0
	LDI ZL, LOW(MOUNTAIN<<1)
	LDI ZH, HIGH(MOUNTAIN<<1)
	SBIW Z, 1					;POINT Z TO JUST BEFORE MOUNTAIN START
	SER DIRECTION				;INITIAL DIRECTION RIGHT
	LDI CURRENT_HEIGHT, 0		;CURRENT HEIGHT 0(LANDING)
	FLY_CTRL FAST_MOTOR_SPEED	;
	FLY_LOOP:
		LCD_CLEAR				;
		;FIND NEXT POSITION
		RCALL FLY_TO_NEXT_POS
		CPI R23, -1				;IF ALL MOUNTAIN BEEN SEARCHED
		BREQ SEARCH_NOT_FOUND	;THEN ACCIDENT SCENE IS NOT FOUND
		SUBI R23, -1			;IF CURRENT HEIGHT IS LESS 
		;CP CURRENT_HEIGHT, R23	;THEN NEXT POSITION'S HEIGHT + 1
		RJMP FLY_HIGH			;WE SHOULD FLY HIGHER
	SEARCH:
		MOV CURRENT_HEIGHT, R23	;NEW HEIGHT IS MOUNTAIN HEIGHT + 1
		;DISPLAY NOW POS
		CALL LCD_DISPLAY_POS
		;DISPLAY "SEARCHING"
		LDI TEMP, LOW(STRING_SEARCH<<1)
		LDI TEMP2, HIGH(STRING_SEARCH<<1)
		RCALL LCD_DISPLAY_STRING
		;SEARCH AREA
		RCALL DRONE_SEARCH
		MACRO_WAIT 15			;WAIT SOME TIME TO SEARCH
		CPI R23, 0
		BREQ FLY_LOOP			;IF NOT FOUND, KEEP FLYING
		RJMP SEARCH_FOUND		;ELSE FOUND

	FLY_HIGH:
		FLY_CTRL FAST_MOTOR_SPEED;SPEED UP TO FLY HIGH
		RJMP SEARCH

	SEARCH_NOT_FOUND:
		CALL LEDFLASH
		CALL FLY_BACK
		LCD_CLEAR
		;DISPLAY NOT FOUND
		LDI TEMP, LOW(STRING_NOT_FOUND<<1)
		LDI TEMP2, HIGH(STRING_NOT_FOUND<<1)
		RCALL LCD_DISPLAY_STRING
		LCD_WRITE_DATA ' '
		LCD_WRITE_DATA 'G'
		FLY_CTRL STOP_MOTOR_SPEED
		RJMP END

	SEARCH_ABORT:
		CALL LEDFLASH
		CALL FLY_BACK
		LCD_CLEAR
		;DISPLAY ABORT
		LDI TEMP, LOW(STRING_ABORT<<1)
		LDI TEMP2, HIGH(STRING_ABORT<<1)
		RCALL LCD_DISPLAY_STRING
		LCD_WRITE_DATA ' '
		LCD_WRITE_DATA 'G'
		FLY_CTRL STOP_MOTOR_SPEED
		SEC
		RJMP END

	SEARCH_FOUND:
		MOV FIND_X, CURRENT_X
		MOV FIND_Y, CURRENT_Y
		MOV FIND_Z, CURRENT_HEIGHT
		DEC FIND_Z
		CALL FLY_BACK
		CALL LEDFLASH
		LCD_CLEAR
		;DISPLAY "FOUND"
		LDI TEMP, LOW(STRING_FOUND<<1)
		LDI TEMP2, HIGH(STRING_FOUND<<1)
		RCALL LCD_DISPLAY_STRING
		;DISPLAY POSITION
		LCD_WRITE_DATA 'X'
		LCD_WRITE_DATA ':'
		MOV TEMP, FIND_X
		RCALL LCD_DISPLAY_NUMBER
		LCD_WRITE_COM 0B11000000
		LCD_WRITE_DATA 'Y'
		LCD_WRITE_DATA ':'
		MOV TEMP, FIND_Y
		RCALL LCD_DISPLAY_NUMBER
		LCD_WRITE_DATA ' '
		LCD_WRITE_DATA 'Z'
		LCD_WRITE_DATA ':'
		MOV TEMP, FIND_Z
		RCALL LCD_DISPLAY_NUMBER
		LCD_WRITE_DATA ' '
		LCD_WRITE_DATA 'G'
		FLY_CTRL STOP_MOTOR_SPEED
		RJMP END

END:
	RJMP END





RESET:
	CLR TEMP
	CLR TEMP2
	CLR DIRECTION
	CLR CURRENT_HEIGHT
	CLR CURRENT_X
	CLR CURRENT_Y
	CLR R23
	;CLEAR ALL REGISTERS BEING USED

	;SETUP LCD
	SER TEMP
	STORE LCD_DATA_DDR, TEMP
	STORE LCD_CTRL_DDR, TEMP
	RCALL LCD_INIT

	;SETUP LED
	SER TEMP	
	STORE LED_DDR, TEMP
	
	;SETUP KEYPAD
	LDI TEMP, 0B11110000
	STORE KEY_DDR, TEMP
	;SET UP EXINTS
	LDI TEMP, (1<<ISC01)|(1<<ISC11)
	STS EICRA, TEMP
	CLR TEMP
	STORE EIMSK, TEMP
	SER TEMP
	STORE DDRE, TEMP
	CALL PWM_GENERATE
	SEI						;ENABLE INTERRUPT
	RJMP MAIN

.INCLUDE "KEYPAD.ASM"
.INCLUDE "LCD.ASM"
.INCLUDE "WAIT.ASM"
.INCLUDE "DRONE.ASM"
.INCLUDE "GENERALFUNC.ASM"
;HARD CODE MAP
.INCLUDE "MOUNTAIN.ASM"
;HARD CODE STRINGS
INPUT_X:	.DB "INPUT X:",0, 0
INPUT_Y: .DB "INPUT Y:", 0, 0
STRING_SEARCH: .DB "SEARCHING", 0
STRING_FOUND: .DB "FOUND  ", 0
STRING_NOT_FOUND: .DB "NOT FOUND", 0
STRING_ABORT: .DB "ABORT", 0
READY_TO_SEARCH: .DB "READY", 0
FLYING_BACK_STRING: .DB "FLY BACK", 0, 0
;USE DESG TO STORE ACCIDENT LOCATION
.DSEG
	ACCIDENT: .BYTE 2
	SCENE_FIND: .BYTE 3